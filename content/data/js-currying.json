{"html":"<hr>\n<h3 id=\"anchor-概念\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-概念\"><span class=\"octicon octicon-link\"></span></a>\n        概念\n        </h3>\n<p>柯里化是是把接受<em>多个参数的函数</em>变换成接受<em>一个单一参数（最初函数的第一个参数）的函数</em>，并且<em>返回接受余下的参数而且返回结果的新函数的技术</em>，即一个函数从可调用的 <code>f(a,b,c)</code> 转换为 <code>f(a)(b)(c)</code>。  </p>\n<h3 id=\"anchor-部分求值（柯里化的好处）\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-部分求值（柯里化的好处）\"><span class=\"octicon octicon-link\"></span></a>\n        部分求值（柯里化的好处）\n        </h3>\n<p>假定我们有下面日志输出的函数：  </p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\">date, type, message</span>) {  \n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[<span class=\"hljs-subst\">${date.getHours()}</span>:<span class=\"hljs-subst\">${date.getMinutes()}</span>] [<span class=\"hljs-subst\">${importance}</span>] <span class=\"hljs-subst\">${message}</span>`</span>)  \n}  \n</code></pre><p>经过柯里化：  </p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> logCurry = _.<span class=\"hljs-title function_\">curry</span>(log)  \n</code></pre><p>我们就可以如下调用：  </p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())(<span class=\"hljs-string\">'Error'</span>)(<span class=\"hljs-string\">'error message'</span>)  \n</code></pre><p>这样我们可以这样创建当前日志的便捷函数：  </p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 当前时间的日志函数  </span>\n<span class=\"hljs-keyword\">const</span> logNow = <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())  \n<span class=\"hljs-comment\">// 使用  </span>\n<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Warning'</span>, <span class=\"hljs-string\">'message'</span>)  \n  \n</code></pre><p><code>logNow</code> 是固定了第一个参数的 <code>log</code> 函数，即 <code>logNow</code> 是<em>部分应用函数（partial）</em>  </p>\n<h3 id=\"anchor-实现\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-实现\"><span class=\"octicon octicon-link\"></span></a>\n        实现\n        </h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curry</span>(<span class=\"hljs-params\">fn</span>) {  \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curried</span>(<span class=\"hljs-params\">...args</span>) {  \n    <span class=\"hljs-keyword\">if</span> (fn.<span class=\"hljs-property\">length</span> &gt; args.<span class=\"hljs-property\">length</span>) {  \n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...args2</span>) {  \n        <span class=\"hljs-keyword\">return</span> curried.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, args.<span class=\"hljs-title function_\">concat</span>(...args2))  \n      }  \n    } <span class=\"hljs-keyword\">else</span> {  \n      <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, args)  \n    }  \n  }  \n}  \n  \n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">a,b,c</span>) {  \n  <span class=\"hljs-keyword\">return</span> a + b + c  \n}  \n  \n<span class=\"hljs-keyword\">const</span> currySum = <span class=\"hljs-title function_\">curry</span>(sum)  \n  \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">currySum</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// 6  </span>\n  \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">currySum</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// 6  </span>\n  \n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">currySum</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// 6  </span>\n</code></pre><p>关于上面实现的说明：  </p>\n<ul>\n<li>首次调用时即 <code>curry(sum)</code> 时，形成 <a href=\"js-closure\"> 闭包 </a>，<code>fn</code> 存储在函数的上下文中  </li>\n<li><code>fn.length</code> 即传入函数（<code>sum</code>）的形式参数的数量，<code>args</code> 是函数执行时实际参数  </li>\n<li><code>curried</code> 函数体中，如果 <code>fn</code> 的形参长度是大于传入的 <code>args</code> 的长度，则它是一个部分函数，还没有调用 <code>fn</code>，则返回一个包装器 <code>pass</code> 继续接收参数并将参数和原来参数拼接  </li>\n<li>否则，只需要使用&nbsp;<code>func.apply</code>&nbsp;将调用传递给它即可</li>\n</ul>\n","heading":[{"text":"概念","level":3,"id":"anchor-概念"},{"text":"部分求值（柯里化的好处）","level":3,"id":"anchor-部分求值（柯里化的好处）"},{"text":"实现","level":3,"id":"anchor-实现"}],"tags":["javascript","面试"],"date":"2024-03-21","series":"javascript","title":"柯里化","slug":"js-currying","keywords":"javascript","description":"柯里化,Currying","lastmod":"2024-03-21","share":"true"}