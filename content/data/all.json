[{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"使用  ","text":"使用  ","tokens":[{"type":"text","raw":"使用  ","text":"使用  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit rebase 目标基础点  \n```  ","lang":"Bash","text":"git rebase 目标基础点  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"*`rebase` 是站在需要被 `rebase` 的 `commit` 上进行操作*  ","text":"*`rebase` 是站在需要被 `rebase` 的 `commit` 上进行操作*  ","tokens":[{"type":"em","raw":"*`rebase` 是站在需要被 `rebase` 的 `commit` 上进行操作*","text":"`rebase` 是站在需要被 `rebase` 的 `commit` 上进行操作","tokens":[{"type":"codespan","raw":"`rebase`","text":"rebase"},{"type":"text","raw":" 是站在需要被 ","text":" 是站在需要被 "},{"type":"codespan","raw":"`rebase`","text":"rebase"},{"type":"text","raw":" 的 ","text":" 的 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":" 上进行操作","text":" 上进行操作"}]},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`rebase` 的意思是，给你的 `commit` 序列重新设置基础点（也就是父 `commit`）。展开来说就是，把你指定的 `commit` 以及它所在的 `commit` 串，以指定的目标 `commit` 为基础，依次重新提交一次。  ","text":"`rebase` 的意思是，给你的 `commit` 序列重新设置基础点（也就是父 `commit`）。展开来说就是，把你指定的 `commit` 以及它所在的 `commit` 串，以指定的目标 `commit` 为基础，依次重新提交一次。  ","tokens":[{"type":"codespan","raw":"`rebase`","text":"rebase"},{"type":"text","raw":" 的意思是，给你的 ","text":" 的意思是，给你的 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":" 序列重新设置基础点（也就是父 ","text":" 序列重新设置基础点（也就是父 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":"）。展开来说就是，把你指定的 ","text":"）。展开来说就是，把你指定的 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":" 以及它所在的 ","text":" 以及它所在的 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":" 串，以指定的目标 ","text":" 串，以指定的目标 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":" 为基础，依次重新提交一次。  ","text":" 为基础，依次重新提交一次。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit checkout branch1  \ngit rebase master  \n```  ","lang":"Bash","text":"git checkout branch1  \ngit rebase master  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/30/1600abd620a8e28c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp)  ","text":"![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/30/1600abd620a8e28c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp)  ","tokens":[{"type":"image","raw":"![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/30/1600abd620a8e28c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp)","href":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/30/1600abd620a8e28c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp","title":null,"text":""},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"可以看出，通过 `rebase`，`5` 和 `6` 两条 `commit`s 把基础点从 `2` 换成了 `4` 。通过这样的方式，就让本来分叉了的提交历史重新回到了一条线。这种「重新设置基础点」的操作，就是 `rebase` 的含义。  ","text":"可以看出，通过 `rebase`，`5` 和 `6` 两条 `commit`s 把基础点从 `2` 换成了 `4` 。通过这样的方式，就让本来分叉了的提交历史重新回到了一条线。这种「重新设置基础点」的操作，就是 `rebase` 的含义。  ","tokens":[{"type":"text","raw":"可以看出，通过 ","text":"可以看出，通过 "},{"type":"codespan","raw":"`rebase`","text":"rebase"},{"type":"text","raw":"，","text":"，"},{"type":"codespan","raw":"`5`","text":"5"},{"type":"text","raw":" 和 ","text":" 和 "},{"type":"codespan","raw":"`6`","text":"6"},{"type":"text","raw":" 两条 ","text":" 两条 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":"s 把基础点从 ","text":"s 把基础点从 "},{"type":"codespan","raw":"`2`","text":"2"},{"type":"text","raw":" 换成了 ","text":" 换成了 "},{"type":"codespan","raw":"`4`","text":"4"},{"type":"text","raw":" 。通过这样的方式，就让本来分叉了的提交历史重新回到了一条线。这种「重新设置基础点」的操作，就是 ","text":" 。通过这样的方式，就让本来分叉了的提交历史重新回到了一条线。这种「重新设置基础点」的操作，就是 "},{"type":"codespan","raw":"`rebase`","text":"rebase"},{"type":"text","raw":" 的含义。  ","text":" 的含义。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"在 `rebase` 之后，记得切回 `master` 再 `merge` 一下，把 `master` 移到最新的 `commit`：  ","text":"在 `rebase` 之后，记得切回 `master` 再 `merge` 一下，把 `master` 移到最新的 `commit`：  ","tokens":[{"type":"text","raw":"在 ","text":"在 "},{"type":"codespan","raw":"`rebase`","text":"rebase"},{"type":"text","raw":" 之后，记得切回 ","text":" 之后，记得切回 "},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":" 再 ","text":" 再 "},{"type":"codespan","raw":"`merge`","text":"merge"},{"type":"text","raw":" 一下，把 ","text":" 一下，把 "},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":" 移到最新的 ","text":" 移到最新的 "},{"type":"codespan","raw":"`commit`","text":"commit"},{"type":"text","raw":"：  ","text":"：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit checkout master   \n  \ngit merge branch1  \n```  ","lang":"Bash","text":"git checkout master   \n  \ngit merge branch1  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/2/160149e054fe485c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp)","text":"![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/2/160149e054fe485c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp)","tokens":[{"type":"image","raw":"![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/2/160149e054fe485c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp)","href":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/2/160149e054fe485c~tplv-t2oaga2asx-jj-mark:1512:0:0:0:q75.awebp","title":null,"text":""}]}],"tags":["git"],"date":"2024-01-04","series":"其他","title":"Git rebase(变基)","slug":"git-rebase","keywords":"git rebase","description":"git用法，git rebase","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"准备新的`feature1`分支，继续我们的新分支开发：  ","text":"准备新的`feature1`分支，继续我们的新分支开发：  ","tokens":[{"type":"text","raw":"准备新的","text":"准备新的"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支，继续我们的新分支开发：  ","text":"分支，继续我们的新分支开发：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch -c feature1  \nSwitched to a new branch 'feature1'  \n```  ","lang":"Bash","text":"git switch -c feature1  \nSwitched to a new branch 'feature1'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"修改`readme.txt`最后一行，改为：  ","text":"修改`readme.txt`最后一行，改为：  ","tokens":[{"type":"text","raw":"修改","text":"修改"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"最后一行，改为：  ","text":"最后一行，改为：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick AND simple.  \n```  ","lang":"Bash","text":"Creating a new branch is quick AND simple.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"在`feature1`分支上提交：  ","text":"在`feature1`分支上提交：  ","tokens":[{"type":"text","raw":"在","text":"在"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支上提交：  ","text":"分支上提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt  \n  \ngit commit -m \"AND simple\"  \n[feature1 14096d0] AND simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n```  ","lang":"Bash","text":"git add readme.txt  \n  \ngit commit -m \"AND simple\"  \n[feature1 14096d0] AND simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"切换到`master`分支：  ","text":"切换到`master`分支：  ","tokens":[{"type":"text","raw":"切换到","text":"切换到"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch master  \nSwitched to branch 'master'  \nYour branch is ahead of 'origin/master' by 1 commit.  \n  (use \"git push\" to publish your local commits)  \n```  ","lang":"Bash","text":"git switch master  \nSwitched to branch 'master'  \nYour branch is ahead of 'origin/master' by 1 commit.  \n  (use \"git push\" to publish your local commits)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"Git还会自动提示我们当前`master`分支比远程的`master`分支要超前1个提交。  ","text":"Git还会自动提示我们当前`master`分支比远程的`master`分支要超前1个提交。  ","tokens":[{"type":"text","raw":"Git还会自动提示我们当前","text":"Git还会自动提示我们当前"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支比远程的","text":"分支比远程的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支要超前1个提交。  ","text":"分支要超前1个提交。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"在`master`分支上把`readme.txt`文件的最后一行改为：  ","text":"在`master`分支上把`readme.txt`文件的最后一行改为：  ","tokens":[{"type":"text","raw":"在","text":"在"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支上把","text":"分支上把"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"文件的最后一行改为：  ","text":"文件的最后一行改为：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick & simple.  \n```  ","lang":"Bash","text":"Creating a new branch is quick & simple.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"提交：  ","text":"提交：  ","tokens":[{"type":"text","raw":"提交：  ","text":"提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt   \ngit commit -m \"& simple\"  \n[master 5dc6824] & simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n```  ","lang":"Bash","text":"git add readme.txt   \ngit commit -m \"& simple\"  \n[master 5dc6824] & simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，`master`分支和`feature1`分支各自都分别有新的提交，变成了这样：  ","text":"现在，`master`分支和`feature1`分支各自都分别有新的提交，变成了这样：  ","tokens":[{"type":"text","raw":"现在，","text":"现在，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支和","text":"分支和"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支各自都分别有新的提交，变成了这样：  ","text":"分支各自都分别有新的提交，变成了这样：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                            HEAD  \n                              │  \n                              │  \n                              ▼  \n                           master  \n                              │  \n                              │  \n                              ▼  \n                            ┌───┐  \n                         ┌─▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘  \n│   │───▶│   │───▶│   │──┤  \n└───┘    └───┘    └───┘  │  ┌───┐  \n                         └─▶│   │  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  \n```  ","lang":"asciidoc","text":"                            HEAD  \n                              │  \n                              │  \n                              ▼  \n                           master  \n                              │  \n                              │  \n                              ▼  \n                            ┌───┐  \n                         ┌─▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘  \n│   │───▶│   │───▶│   │──┤  \n└───┘    └───┘    └───┘  │  ┌───┐  \n                         └─▶│   │  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  ","text":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  ","tokens":[{"type":"text","raw":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  ","text":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit merge feature1  \nAuto-merging readme.txt  \nCONFLICT (content): Merge conflict in readme.txt  \nAutomatic merge failed; fix conflicts and then commit the result.  \n```  ","lang":"Bash","text":"git merge feature1  \nAuto-merging readme.txt  \nCONFLICT (content): Merge conflict in readme.txt  \nAutomatic merge failed; fix conflicts and then commit the result.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"果然冲突了！Git告诉我们，`readme.txt`文件存在冲突，必须手动解决冲突后再提交。`git status`也可以告诉我们冲突的文件：  ","text":"果然冲突了！Git告诉我们，`readme.txt`文件存在冲突，必须手动解决冲突后再提交。`git status`也可以告诉我们冲突的文件：  ","tokens":[{"type":"text","raw":"果然冲突了！Git告诉我们，","text":"果然冲突了！Git告诉我们，"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"文件存在冲突，必须手动解决冲突后再提交。","text":"文件存在冲突，必须手动解决冲突后再提交。"},{"type":"codespan","raw":"`git status`","text":"git status"},{"type":"text","raw":"也可以告诉我们冲突的文件：  ","text":"也可以告诉我们冲突的文件：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit status  \nOn branch master  \nYour branch is ahead of 'origin/master' by 2 commits.  \n  (use \"git push\" to publish your local commits)  \n  \nYou have unmerged paths.  \n  (fix conflicts and run \"git commit\")  \n  (use \"git merge --abort\" to abort the merge)  \n  \nUnmerged paths:  \n  (use \"git add <file>...\" to mark resolution)  \n  \n    both modified:   readme.txt  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  \n```  ","lang":"Bash","text":"git status  \nOn branch master  \nYour branch is ahead of 'origin/master' by 2 commits.  \n  (use \"git push\" to publish your local commits)  \n  \nYou have unmerged paths.  \n  (fix conflicts and run \"git commit\")  \n  (use \"git merge --abort\" to abort the merge)  \n  \nUnmerged paths:  \n  (use \"git add <file>...\" to mark resolution)  \n  \n    both modified:   readme.txt  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"我们可以直接查看readme.txt的内容：  ","text":"我们可以直接查看readme.txt的内容：  ","tokens":[{"type":"text","raw":"我们可以直接查看readme.txt的内容：  ","text":"我们可以直接查看readme.txt的内容：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nGit is a distributed version control system.  \nGit is free software distributed under the GPL.  \nGit has a mutable index called stage.  \nGit tracks changes of files.  \n<<<<<<< HEAD  \nCreating a new branch is quick & simple.  \n=======  \nCreating a new branch is quick AND simple.  \n>>>>>>> feature1  \n```  ","lang":"Bash","text":"Git is a distributed version control system.  \nGit is free software distributed under the GPL.  \nGit has a mutable index called stage.  \nGit tracks changes of files.  \n<<<<<<< HEAD  \nCreating a new branch is quick & simple.  \n=======  \nCreating a new branch is quick AND simple.  \n>>>>>>> feature1  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"Git用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的内容，我们修改如下后保存：  ","text":"Git用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的内容，我们修改如下后保存：  ","tokens":[{"type":"text","raw":"Git用","text":"Git用"},{"type":"codespan","raw":"`<<<<<<<`","text":"&lt;&lt;&lt;&lt;&lt;&lt;&lt;"},{"type":"text","raw":"，","text":"，"},{"type":"codespan","raw":"`=======`","text":"======="},{"type":"text","raw":"，","text":"，"},{"type":"codespan","raw":"`>>>>>>>`","text":"&gt;&gt;&gt;&gt;&gt;&gt;&gt;"},{"type":"text","raw":"标记出不同分支的内容，我们修改如下后保存：  ","text":"标记出不同分支的内容，我们修改如下后保存：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick and simple.  \n```  ","lang":"Bash","text":"Creating a new branch is quick and simple.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"再提交：  ","text":"再提交：  ","tokens":[{"type":"text","raw":"再提交：  ","text":"再提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt   \ngit commit -m \"conflict fixed\"  \n[master cf810e4] conflict fixed  \n```  ","lang":"Bash","text":"git add readme.txt   \ngit commit -m \"conflict fixed\"  \n[master cf810e4] conflict fixed  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，`master`分支和`feature1`分支变成了下图所示：  ","text":"现在，`master`分支和`feature1`分支变成了下图所示：  ","tokens":[{"type":"text","raw":"现在，","text":"现在，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支和","text":"分支和"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支变成了下图所示：  ","text":"分支变成了下图所示：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"```ascii  \n                                     HEAD  \n                                       │  \n                                       │  \n                                       ▼  \n                                    master  \n                                       │  \n                                       │  \n                                       ▼  \n                            ┌───┐    ┌───┐  \n                         ┌─▶│   │───▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘    └───┘  \n│   │───▶│   │───▶│   │──┤             ▲  \n└───┘    └───┘    └───┘  │  ┌───┐      │  \n                         └─▶│   │──────┘  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  \n```  ","lang":"ascii","text":"                                     HEAD  \n                                       │  \n                                       │  \n                                       ▼  \n                                    master  \n                                       │  \n                                       │  \n                                       ▼  \n                            ┌───┐    ┌───┐  \n                         ┌─▶│   │───▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘    └───┘  \n│   │───▶│   │───▶│   │──┤             ▲  \n└───┘    └───┘    └───┘  │  ┌───┐      │  \n                         └─▶│   │──────┘  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"用带参数的`git log`也可以看到分支的合并情况：  ","text":"用带参数的`git log`也可以看到分支的合并情况：  ","tokens":[{"type":"text","raw":"用带参数的","text":"用带参数的"},{"type":"codespan","raw":"`git log`","text":"git log"},{"type":"text","raw":"也可以看到分支的合并情况：  ","text":"也可以看到分支的合并情况：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit log --graph --pretty=oneline --abbrev-commit  \n*   cf810e4 (HEAD -> master) conflict fixed  \n|\\    \n| * 14096d0 (feature1) AND simple  \n* | 5dc6824 & simple  \n|/    \n* b17d20e branch test  \n* d46f35e (origin/master) remove test.txt  \n* b84166e add test.txt  \n* 519219b git tracks changes  \n* e43a48b understand how stage works  \n* 1094adb append GPL  \n* e475afc add distributed  \n* eaadf4e wrote a readme file  \n```  ","lang":"Bash","text":"git log --graph --pretty=oneline --abbrev-commit  \n*   cf810e4 (HEAD -> master) conflict fixed  \n|\\    \n| * 14096d0 (feature1) AND simple  \n* | 5dc6824 & simple  \n|/    \n* b17d20e branch test  \n* d46f35e (origin/master) remove test.txt  \n* b84166e add test.txt  \n* 519219b git tracks changes  \n* e43a48b understand how stage works  \n* 1094adb append GPL  \n* e475afc add distributed  \n* eaadf4e wrote a readme file  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"最后，删除`feature1`分支：  ","text":"最后，删除`feature1`分支：  ","tokens":[{"type":"text","raw":"最后，删除","text":"最后，删除"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch -d feature1  \nDeleted branch feature1 (was 14096d0).  \n```  ","lang":"Bash","text":"git branch -d feature1  \nDeleted branch feature1 (was 14096d0).  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"用`git log --graph`命令可以看到分支合并图。  ","text":"用`git log --graph`命令可以看到分支合并图。  ","tokens":[{"type":"text","raw":"用","text":"用"},{"type":"codespan","raw":"`git log --graph`","text":"git log --graph"},{"type":"text","raw":"命令可以看到分支合并图。  ","text":"命令可以看到分支合并图。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git merge --abort` 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.","text":"`git merge --abort` 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.","tokens":[{"type":"codespan","raw":"`git merge --abort`","text":"git merge --abort"},{"type":"text","raw":" 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.","text":" 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动."}]}],"tags":["git"],"date":"2024-01-11","series":"其他","title":"Git冲突合并","slug":"git-merge","keywords":"git冲突合并","description":"git用法，git merge","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"在实际开发中，我们应该按照几个基本原则进行分支管理：  ","text":"在实际开发中，我们应该按照几个基本原则进行分支管理：  ","tokens":[{"type":"text","raw":"在实际开发中，我们应该按照几个基本原则进行分支管理：  ","text":"在实际开发中，我们应该按照几个基本原则进行分支管理：  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"首先，`master`分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；  ","text":"首先，`master`分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；  ","tokens":[{"type":"text","raw":"首先，","text":"首先，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；  ","text":"分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"那在哪干活呢？干活都在`dev`分支上，也就是说，`dev`分支是不稳定的，到某个时候，比如1.0版本发布时，再把`dev`分支合并到`master`上，在`master`分支发布1.0版本；  ","text":"那在哪干活呢？干活都在`dev`分支上，也就是说，`dev`分支是不稳定的，到某个时候，比如1.0版本发布时，再把`dev`分支合并到`master`上，在`master`分支发布1.0版本；  ","tokens":[{"type":"text","raw":"那在哪干活呢？干活都在","text":"那在哪干活呢？干活都在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上，也就是说，","text":"分支上，也就是说，"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支是不稳定的，到某个时候，比如1.0版本发布时，再把","text":"分支是不稳定的，到某个时候，比如1.0版本发布时，再把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支合并到","text":"分支合并到"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"上，在","text":"上，在"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支发布1.0版本；  ","text":"分支发布1.0版本；  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"你和你的小伙伴们每个人都在`dev`分支上干活，每个人都有自己的分支，时不时地往`dev`分支上合并就可以了。  ","text":"你和你的小伙伴们每个人都在`dev`分支上干活，每个人都有自己的分支，时不时地往`dev`分支上合并就可以了。  ","tokens":[{"type":"text","raw":"你和你的小伙伴们每个人都在","text":"你和你的小伙伴们每个人都在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上干活，每个人都有自己的分支，时不时地往","text":"分支上干活，每个人都有自己的分支，时不时地往"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上合并就可以了。  ","text":"分支上合并就可以了。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"所以，团队合作的分支看起来就像这样：  ","text":"所以，团队合作的分支看起来就像这样：  ","tokens":[{"type":"text","raw":"所以，团队合作的分支看起来就像这样：  ","text":"所以，团队合作的分支看起来就像这样：  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"![git-team.png](../../static/images/git-team.png)  ","text":"![git-team.png](../../static/images/git-team.png)  ","tokens":[{"type":"image","raw":"![git-team.png](../../static/images/git-team.png)","href":"../../static/images/git-team.png","title":null,"text":"git-team.png"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"合并分支时，加上`--no-ff`参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而`fast forward`合并就看不出来曾经做过合并。从分支历史上就可以看出分支信息  ","text":"合并分支时，加上`--no-ff`参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而`fast forward`合并就看不出来曾经做过合并。从分支历史上就可以看出分支信息  ","tokens":[{"type":"text","raw":"合并分支时，加上","text":"合并分支时，加上"},{"type":"codespan","raw":"`--no-ff`","text":"--no-ff"},{"type":"text","raw":"参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而","text":"参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而"},{"type":"codespan","raw":"`fast forward`","text":"fast forward"},{"type":"text","raw":"合并就看不出来曾经做过合并。从分支历史上就可以看出分支信息  ","text":"合并就看不出来曾经做过合并。从分支历史上就可以看出分支信息  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit merge --no-ff -m \"merge with no-ff\" dev  \nMerge made by the 'recursive' strategy.  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  \n```  ","lang":"Bash","text":"git merge --no-ff -m \"merge with no-ff\" dev  \nMerge made by the 'recursive' strategy.  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"![git-no-ff.png](../../static/images/git-no-ff.png)  ","text":"![git-no-ff.png](../../static/images/git-no-ff.png)  ","tokens":[{"type":"image","raw":"![git-no-ff.png](../../static/images/git-no-ff.png)","href":"../../static/images/git-no-ff.png","title":null,"text":"git-no-ff.png"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### bug的处理  \n","depth":3,"text":"bug的处理","tokens":[{"type":"text","raw":"bug的处理","text":"bug的处理"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。  ","text":"每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。  ","tokens":[{"type":"text","raw":"每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。  ","text":"每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"当前分支功能还没完成，这时候就需要git提供的`stash`，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。  ","text":"当前分支功能还没完成，这时候就需要git提供的`stash`，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。  ","tokens":[{"type":"text","raw":"当前分支功能还没完成，这时候就需要git提供的","text":"当前分支功能还没完成，这时候就需要git提供的"},{"type":"codespan","raw":"`stash`","text":"stash"},{"type":"text","raw":"，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。  ","text":"，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit stash  \nSaved working directory and index state WIP on dev: f52c633 add merge  \n  \ngit checkout master # 切换需要改bug的分支  \n  \ngit checkout -b issue-1 # 创建修改bug分支  \n  \ngit commit -m 'fixed' # 提交修改  \n  \ngit switch master # 切换到主分支  \n  \ngit merge --no-ff -m 'merge bug issue-1' # 合并代码 （--no-ff 关闭fast-forward 生成一条merge记录）  \n  \ngit switch dev # 切换到开发分支  \n```  ","lang":"Bash","text":"git stash  \nSaved working directory and index state WIP on dev: f52c633 add merge  \n  \ngit checkout master # 切换需要改bug的分支  \n  \ngit checkout -b issue-1 # 创建修改bug分支  \n  \ngit commit -m 'fixed' # 提交修改  \n  \ngit switch master # 切换到主分支  \n  \ngit merge --no-ff -m 'merge bug issue-1' # 合并代码 （--no-ff 关闭fast-forward 生成一条merge记录）  \n  \ngit switch dev # 切换到开发分支  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"用`git stash list`命令看看  ","text":"用`git stash list`命令看看  ","tokens":[{"type":"text","raw":"用","text":"用"},{"type":"codespan","raw":"`git stash list`","text":"git stash list"},{"type":"text","raw":"命令看看  ","text":"命令看看  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit stash list  \nstash@{0}: WIP on dev: f52c633 add merge  \n```  ","lang":"Bash","text":"git stash list  \nstash@{0}: WIP on dev: f52c633 add merge  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除；  ","text":"一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除；  ","tokens":[{"type":"text","raw":"一是用","text":"一是用"},{"type":"codespan","raw":"`git stash apply`","text":"git stash apply"},{"type":"text","raw":"恢复，但是恢复后，stash内容并不删除，你需要用","text":"恢复，但是恢复后，stash内容并不删除，你需要用"},{"type":"codespan","raw":"`git stash drop`","text":"git stash drop"},{"type":"text","raw":"来删除；  ","text":"来删除；  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"另一种方式是用`git stash pop`，恢复的同时把stash内容也删了。  ","text":"另一种方式是用`git stash pop`，恢复的同时把stash内容也删了。  ","tokens":[{"type":"text","raw":"另一种方式是用","text":"另一种方式是用"},{"type":"codespan","raw":"`git stash pop`","text":"git stash pop"},{"type":"text","raw":"，恢复的同时把stash内容也删了。  ","text":"，恢复的同时把stash内容也删了。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。  ","text":"在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。  ","tokens":[{"type":"text","raw":"在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。  ","text":"在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"Git专门提供了一个`cherry-pick`命令，让我们能复制一个特定的提交到当前分支。  ","text":"Git专门提供了一个`cherry-pick`命令，让我们能复制一个特定的提交到当前分支。  ","tokens":[{"type":"text","raw":"Git专门提供了一个","text":"Git专门提供了一个"},{"type":"codespan","raw":"`cherry-pick`","text":"cherry-pick"},{"type":"text","raw":"命令，让我们能复制一个特定的提交到当前分支。  ","text":"命令，让我们能复制一个特定的提交到当前分支。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch  \n* dev  \n  master  \ngit cherry-pick 4c805e2  \n[master 1d4b803] fix bug 101  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n```  ","lang":"Bash","text":"git branch  \n* dev  \n  master  \ngit cherry-pick 4c805e2  \n[master 1d4b803] fix bug 101  \n 1 file changed, 1 insertion(+), 1 deletion(-)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"*`cherry-pick`和`git stash`步骤问题：*  \n是回到dev分支后，先 git cherry-pick 4c805e2 再 git stash pop就可以了  ","text":"*`cherry-pick`和`git stash`步骤问题：*  \n是回到dev分支后，先 git cherry-pick 4c805e2 再 git stash pop就可以了  ","tokens":[{"type":"em","raw":"*`cherry-pick`和`git stash`步骤问题：*","text":"`cherry-pick`和`git stash`步骤问题：","tokens":[{"type":"codespan","raw":"`cherry-pick`","text":"cherry-pick"},{"type":"text","raw":"和","text":"和"},{"type":"codespan","raw":"`git stash`","text":"git stash"},{"type":"text","raw":"步骤问题：","text":"步骤问题："}]},{"type":"br","raw":"  \n"},{"type":"text","raw":"是回到dev分支后，先 git cherry-pick 4c805e2 再 git stash pop就可以了  ","text":"是回到dev分支后，先 git cherry-pick 4c805e2 再 git stash pop就可以了  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### 新特性开发  \n","depth":3,"text":"新特性开发","tokens":[{"type":"text","raw":"新特性开发","text":"新特性开发"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。  ","text":"添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。  ","tokens":[{"type":"text","raw":"添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。  ","text":"添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"创建新特性分支  ","text":"创建新特性分支  ","tokens":[{"type":"text","raw":"创建新特性分支  ","text":"创建新特性分支  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch -c feature-vulcan  \nSwitched to a new branch 'feature-vulcan'  \n```  ","lang":"Bash","text":"git switch -c feature-vulcan  \nSwitched to a new branch 'feature-vulcan'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"提交分支  ","text":"提交分支  ","tokens":[{"type":"text","raw":"提交分支  ","text":"提交分支  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add vulcan.py  \n  \ngit status  \nOn branch feature-vulcan  \nChanges to be committed:  \n  (use \"git reset HEAD <file>...\" to unstage)  \n  \n    new file:   vulcan.py  \n  \ngit commit -m \"add feature vulcan\"  \n[feature-vulcan 287773e] add feature vulcan  \n 1 file changed, 2 insertions(+)  \n create mode 100644 vulcan.py  \n```  ","lang":"Bash","text":"git add vulcan.py  \n  \ngit status  \nOn branch feature-vulcan  \nChanges to be committed:  \n  (use \"git reset HEAD <file>...\" to unstage)  \n  \n    new file:   vulcan.py  \n  \ngit commit -m \"add feature vulcan\"  \n[feature-vulcan 287773e] add feature vulcan  \n 1 file changed, 2 insertions(+)  \n create mode 100644 vulcan.py  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"切回开发分支  ","text":"切回开发分支  ","tokens":[{"type":"text","raw":"切回开发分支  ","text":"切回开发分支  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch dev  \n```  ","lang":"Bash","text":"git switch dev  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"如果一切正常，可以使用`git merge feature-vulcan`合并，如果不需要该特性就可以`git branch -D feature-vulcan` 删除该分支  ","text":"如果一切正常，可以使用`git merge feature-vulcan`合并，如果不需要该特性就可以`git branch -D feature-vulcan` 删除该分支  ","tokens":[{"type":"text","raw":"如果一切正常，可以使用","text":"如果一切正常，可以使用"},{"type":"codespan","raw":"`git merge feature-vulcan`","text":"git merge feature-vulcan"},{"type":"text","raw":"合并，如果不需要该特性就可以","text":"合并，如果不需要该特性就可以"},{"type":"codespan","raw":"`git branch -D feature-vulcan`","text":"git branch -D feature-vulcan"},{"type":"text","raw":" 删除该分支  ","text":" 删除该分支  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch -d feature-vulcan  \nerror: The branch 'feature-vulcan' is not fully merged.  \nIf you are sure you want to delete it, run 'git branch -D feature-vulcan'.  \n```  ","lang":"Bash","text":"git branch -d feature-vulcan  \nerror: The branch 'feature-vulcan' is not fully merged.  \nIf you are sure you want to delete it, run 'git branch -D feature-vulcan'.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`-D` 是强制删除，使用`-d`则是给出提示当前分支未合并，不能删除。  ","text":"`-D` 是强制删除，使用`-d`则是给出提示当前分支未合并，不能删除。  ","tokens":[{"type":"codespan","raw":"`-D`","text":"-D"},{"type":"text","raw":" 是强制删除，使用","text":" 是强制删除，使用"},{"type":"codespan","raw":"`-d`","text":"-d"},{"type":"text","raw":"则是给出提示当前分支未合并，不能删除。  ","text":"则是给出提示当前分支未合并，不能删除。  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### 团队协作  \n","depth":3,"text":"团队协作","tokens":[{"type":"text","raw":"团队协作","text":"团队协作"}]},{"type":"space","raw":"  \n"},{"type":"list","raw":"- 查看远程库信息，使用`git remote -v`；  \n- 本地新建的分支如果不推送到远程，对其他人就是不可见的；  \n- 从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；  \n- 在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；  \n- 建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；  \n- 从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- 查看远程库信息，使用`git remote -v`；  \n","task":false,"loose":false,"text":"查看远程库信息，使用`git remote -v`；  ","tokens":[{"type":"text","raw":"查看远程库信息，使用`git remote -v`；  ","text":"查看远程库信息，使用`git remote -v`；  ","tokens":[{"type":"text","raw":"查看远程库信息，使用","text":"查看远程库信息，使用"},{"type":"codespan","raw":"`git remote -v`","text":"git remote -v"},{"type":"text","raw":"；  ","text":"；  "}]}]},{"type":"list_item","raw":"- 本地新建的分支如果不推送到远程，对其他人就是不可见的；  \n","task":false,"loose":false,"text":"本地新建的分支如果不推送到远程，对其他人就是不可见的；  ","tokens":[{"type":"text","raw":"本地新建的分支如果不推送到远程，对其他人就是不可见的；  ","text":"本地新建的分支如果不推送到远程，对其他人就是不可见的；  ","tokens":[{"type":"text","raw":"本地新建的分支如果不推送到远程，对其他人就是不可见的；  ","text":"本地新建的分支如果不推送到远程，对其他人就是不可见的；  "}]}]},{"type":"list_item","raw":"- 从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；  \n","task":false,"loose":false,"text":"从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；  ","tokens":[{"type":"text","raw":"从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；  ","text":"从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；  ","tokens":[{"type":"text","raw":"从本地推送分支，使用","text":"从本地推送分支，使用"},{"type":"codespan","raw":"`git push origin branch-name`","text":"git push origin branch-name"},{"type":"text","raw":"，如果推送失败，先用","text":"，如果推送失败，先用"},{"type":"codespan","raw":"`git pull`","text":"git pull"},{"type":"text","raw":"抓取远程的新提交；  ","text":"抓取远程的新提交；  "}]}]},{"type":"list_item","raw":"- 在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；  \n","task":false,"loose":false,"text":"在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；  ","tokens":[{"type":"text","raw":"在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；  ","text":"在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；  ","tokens":[{"type":"text","raw":"在本地创建和远程分支对应的分支，使用","text":"在本地创建和远程分支对应的分支，使用"},{"type":"codespan","raw":"`git checkout -b branch-name origin/branch-name`","text":"git checkout -b branch-name origin/branch-name"},{"type":"text","raw":"，本地和远程分支的名称最好一致；  ","text":"，本地和远程分支的名称最好一致；  "}]}]},{"type":"list_item","raw":"- 建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；  \n","task":false,"loose":false,"text":"建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；  ","tokens":[{"type":"text","raw":"建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；  ","text":"建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；  ","tokens":[{"type":"text","raw":"建立本地分支和远程分支的关联，使用","text":"建立本地分支和远程分支的关联，使用"},{"type":"codespan","raw":"`git branch --set-upstream branch-name origin/branch-name`","text":"git branch --set-upstream branch-name origin/branch-name"},{"type":"text","raw":"；  ","text":"；  "}]}]},{"type":"list_item","raw":"- 从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。","task":false,"loose":false,"text":"从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。","tokens":[{"type":"text","raw":"从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。","text":"从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。","tokens":[{"type":"text","raw":"从远程抓取分支，使用","text":"从远程抓取分支，使用"},{"type":"codespan","raw":"`git pull`","text":"git pull"},{"type":"text","raw":"，如果有冲突，要先处理冲突。","text":"，如果有冲突，要先处理冲突。"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"paragraph","raw":"当你从远程仓库克隆时，实际上Git自动把本地的`master`分支和远程的`master`分支对应起来了，并且，远程仓库的默认名称是`origin`。  ","text":"当你从远程仓库克隆时，实际上Git自动把本地的`master`分支和远程的`master`分支对应起来了，并且，远程仓库的默认名称是`origin`。  ","tokens":[{"type":"text","raw":"当你从远程仓库克隆时，实际上Git自动把本地的","text":"当你从远程仓库克隆时，实际上Git自动把本地的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支和远程的","text":"分支和远程的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支对应起来了，并且，远程仓库的默认名称是","text":"分支对应起来了，并且，远程仓库的默认名称是"},{"type":"codespan","raw":"`origin`","text":"origin"},{"type":"text","raw":"。  ","text":"。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"要查看远程库的信息，用`git remote`：  ","text":"要查看远程库的信息，用`git remote`：  ","tokens":[{"type":"text","raw":"要查看远程库的信息，用","text":"要查看远程库的信息，用"},{"type":"codespan","raw":"`git remote`","text":"git remote"},{"type":"text","raw":"：  ","text":"：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit remote  \norigin  \n```  ","lang":"Bash","text":"git remote  \norigin  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"或者，用`git remote -v`显示更详细的信息：  ","text":"或者，用`git remote -v`显示更详细的信息：  ","tokens":[{"type":"text","raw":"或者，用","text":"或者，用"},{"type":"codespan","raw":"`git remote -v`","text":"git remote -v"},{"type":"text","raw":"显示更详细的信息：  ","text":"显示更详细的信息：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit remote -v  \norigin  git@github.com:michaelliao/learngit.git (fetch)  \norigin  git@github.com:michaelliao/learngit.git (push)  \n```  ","lang":"Bash","text":"git remote -v  \norigin  git@github.com:michaelliao/learngit.git (fetch)  \norigin  git@github.com:michaelliao/learngit.git (push)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"上面显示了可以抓取和推送的`origin`的地址。如果没有推送权限，就看不到push的地址。  ","text":"上面显示了可以抓取和推送的`origin`的地址。如果没有推送权限，就看不到push的地址。  ","tokens":[{"type":"text","raw":"上面显示了可以抓取和推送的","text":"上面显示了可以抓取和推送的"},{"type":"codespan","raw":"`origin`","text":"origin"},{"type":"text","raw":"的地址。如果没有推送权限，就看不到push的地址。  ","text":"的地址。如果没有推送权限，就看不到push的地址。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上。  ","text":"推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上。  ","tokens":[{"type":"text","raw":"推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上。  ","text":"推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit push origin dev # 推送到dev分支  \n  \ngit push origin master # 推送到住分支  \n```  ","lang":"Bash","text":"git push origin dev # 推送到dev分支  \n  \ngit push origin master # 推送到住分支  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？  \n","text":"但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？  ","tokens":[{"type":"text","raw":"但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？  ","text":"但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？  "}]},{"type":"list","raw":"- `master`分支是主分支，因此要时刻与远程同步；  \n- `dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；  \n- bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；  \n- feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `master`分支是主分支，因此要时刻与远程同步；  \n","task":false,"loose":false,"text":"`master`分支是主分支，因此要时刻与远程同步；  ","tokens":[{"type":"text","raw":"`master`分支是主分支，因此要时刻与远程同步；  ","text":"`master`分支是主分支，因此要时刻与远程同步；  ","tokens":[{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支是主分支，因此要时刻与远程同步；  ","text":"分支是主分支，因此要时刻与远程同步；  "}]}]},{"type":"list_item","raw":"- `dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；  \n","task":false,"loose":false,"text":"`dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；  ","tokens":[{"type":"text","raw":"`dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；  ","text":"`dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；  ","tokens":[{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；  ","text":"分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；  "}]}]},{"type":"list_item","raw":"- bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；  \n","task":false,"loose":false,"text":"bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；  ","tokens":[{"type":"text","raw":"bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；  ","text":"bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；  ","tokens":[{"type":"text","raw":"bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；  ","text":"bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；  "}]}]},{"type":"list_item","raw":"- feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。","task":false,"loose":false,"text":"feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。","tokens":[{"type":"text","raw":"feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。","text":"feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。","tokens":[{"type":"text","raw":"feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。","text":"feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"heading","raw":"### 抓取分支  \n","depth":3,"text":"抓取分支","tokens":[{"type":"text","raw":"抓取分支","text":"抓取分支"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"多人协作时，大家都会往`master`和`dev`分支上推送各自的修改。  ","text":"多人协作时，大家都会往`master`和`dev`分支上推送各自的修改。  ","tokens":[{"type":"text","raw":"多人协作时，大家都会往","text":"多人协作时，大家都会往"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"和","text":"和"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上推送各自的修改。  ","text":"分支上推送各自的修改。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit clone git@github.com:michaelliao/learngit.git  \nCloning into 'learngit'...  \nremote: Counting objects: 40, done.  \nremote: Compressing objects: 100% (21/21), done.  \nremote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0  \nReceiving objects: 100% (40/40), done.  \nResolving deltas: 100% (14/14), done.  \n```  ","lang":"Bash","text":"git clone git@github.com:michaelliao/learngit.git  \nCloning into 'learngit'...  \nremote: Counting objects: 40, done.  \nremote: Compressing objects: 100% (21/21), done.  \nremote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0  \nReceiving objects: 100% (40/40), done.  \nResolving deltas: 100% (14/14), done.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"从远程库clone时，默认情况下，你的小伙伴只能看到本地的`master`分支  ","text":"从远程库clone时，默认情况下，你的小伙伴只能看到本地的`master`分支  ","tokens":[{"type":"text","raw":"从远程库clone时，默认情况下，你的小伙伴只能看到本地的","text":"从远程库clone时，默认情况下，你的小伙伴只能看到本地的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支  ","text":"分支  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"要在`dev`分支上开发，就必须创建远程`origin`的`dev`分支到本地，于是他用这个命令创建本地`dev`分支：  ","text":"要在`dev`分支上开发，就必须创建远程`origin`的`dev`分支到本地，于是他用这个命令创建本地`dev`分支：  ","tokens":[{"type":"text","raw":"要在","text":"要在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上开发，就必须创建远程","text":"分支上开发，就必须创建远程"},{"type":"codespan","raw":"`origin`","text":"origin"},{"type":"text","raw":"的","text":"的"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支到本地，于是他用这个命令创建本地","text":"分支到本地，于是他用这个命令创建本地"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit checkout -b dev origin/dev  \n```  ","lang":"Bash","text":"git checkout -b dev origin/dev  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，就可以在`dev`上继续修改，然后，把`dev`分支`push`到远程：  ","text":"现在，就可以在`dev`上继续修改，然后，把`dev`分支`push`到远程：  ","tokens":[{"type":"text","raw":"现在，就可以在","text":"现在，就可以在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"上继续修改，然后，把","text":"上继续修改，然后，把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支","text":"分支"},{"type":"codespan","raw":"`push`","text":"push"},{"type":"text","raw":"到远程：  ","text":"到远程：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit push origin dev  \nCounting objects: 3, done.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (2/2), done.  \nWriting objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.  \nTotal 3 (delta 0), reused 0 (delta 0)  \nTo github.com:michaelliao/learngit.git  \n   f52c633..7a5e5dd  dev -> dev  \n```  ","lang":"Bash","text":"git push origin dev  \nCounting objects: 3, done.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (2/2), done.  \nWriting objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.  \nTotal 3 (delta 0), reused 0 (delta 0)  \nTo github.com:michaelliao/learngit.git  \n   f52c633..7a5e5dd  dev -> dev  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"多人协作的工作模式通常是这样：  ","text":"多人协作的工作模式通常是这样：  ","tokens":[{"type":"text","raw":"多人协作的工作模式通常是这样：  ","text":"多人协作的工作模式通常是这样：  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"1. 首先，可以试图用`git push origin <branch-name>`推送自己的修改；  \n2. 如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；  \n3. 如果合并有冲突，则解决冲突，并在本地提交；  \n4. 没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！","ordered":true,"start":1,"loose":false,"items":[{"type":"list_item","raw":"1. 首先，可以试图用`git push origin <branch-name>`推送自己的修改；  \n","task":false,"loose":false,"text":"首先，可以试图用`git push origin <branch-name>`推送自己的修改；  ","tokens":[{"type":"text","raw":"首先，可以试图用`git push origin <branch-name>`推送自己的修改；  ","text":"首先，可以试图用`git push origin <branch-name>`推送自己的修改；  ","tokens":[{"type":"text","raw":"首先，可以试图用","text":"首先，可以试图用"},{"type":"codespan","raw":"`git push origin <branch-name>`","text":"git push origin &lt;branch-name&gt;"},{"type":"text","raw":"推送自己的修改；  ","text":"推送自己的修改；  "}]}]},{"type":"list_item","raw":"2. 如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；  \n","task":false,"loose":false,"text":"如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；  ","tokens":[{"type":"text","raw":"如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；  ","text":"如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；  ","tokens":[{"type":"text","raw":"如果推送失败，则因为远程分支比你的本地更新，需要先用","text":"如果推送失败，则因为远程分支比你的本地更新，需要先用"},{"type":"codespan","raw":"`git pull`","text":"git pull"},{"type":"text","raw":"试图合并；  ","text":"试图合并；  "}]}]},{"type":"list_item","raw":"3. 如果合并有冲突，则解决冲突，并在本地提交；  \n","task":false,"loose":false,"text":"如果合并有冲突，则解决冲突，并在本地提交；  ","tokens":[{"type":"text","raw":"如果合并有冲突，则解决冲突，并在本地提交；  ","text":"如果合并有冲突，则解决冲突，并在本地提交；  ","tokens":[{"type":"text","raw":"如果合并有冲突，则解决冲突，并在本地提交；  ","text":"如果合并有冲突，则解决冲突，并在本地提交；  "}]}]},{"type":"list_item","raw":"4. 没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！","task":false,"loose":false,"text":"没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！","tokens":[{"type":"text","raw":"没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！","text":"没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！","tokens":[{"type":"text","raw":"没有冲突或者解决掉冲突后，再用","text":"没有冲突或者解决掉冲突后，再用"},{"type":"codespan","raw":"`git push origin <branch-name>`","text":"git push origin &lt;branch-name&gt;"},{"type":"text","raw":"推送就能成功！","text":"推送就能成功！"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"paragraph","raw":"如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`。","text":"如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`。","tokens":[{"type":"text","raw":"如果","text":"如果"},{"type":"codespan","raw":"`git pull`","text":"git pull"},{"type":"text","raw":"提示","text":"提示"},{"type":"codespan","raw":"`no tracking information`","text":"no tracking information"},{"type":"text","raw":"，则说明本地分支和远程分支的链接关系没有创建，用命令","text":"，则说明本地分支和远程分支的链接关系没有创建，用命令"},{"type":"codespan","raw":"`git branch --set-upstream-to <branch-name> origin/<branch-name>`","text":"git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;"},{"type":"text","raw":"。","text":"。"}]}],"tags":["git"],"date":"2024-01-19","series":"其他","title":"Git分支策略","slug":"git-branch-strategy","keywords":"git branch strategy","description":"git用法，git 分支策略","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"list","raw":"- 命令`git tag <tagname>`用于新建一个标签，默认为`HEAD`，也可以指定一个commit id；  \n- 命令`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；  \n- 命令`git tag`可以查看所有标签。  \n- 命令`git push origin <tagname>`可以推送一个本地标签；  \n- 命令`git push origin --tags`可以推送全部未推送过的本地标签；  \n- 命令`git tag -d <tagname>`可以删除一个本地标签；  \n- 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  \n- *命令`git push origin -d tag tagName`也可以用来删除一个远程分支*","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- 命令`git tag <tagname>`用于新建一个标签，默认为`HEAD`，也可以指定一个commit id；  \n","task":false,"loose":false,"text":"命令`git tag <tagname>`用于新建一个标签，默认为`HEAD`，也可以指定一个commit id；  ","tokens":[{"type":"text","raw":"命令`git tag <tagname>`用于新建一个标签，默认为`HEAD`，也可以指定一个commit id；  ","text":"命令`git tag <tagname>`用于新建一个标签，默认为`HEAD`，也可以指定一个commit id；  ","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git tag <tagname>`","text":"git tag &lt;tagname&gt;"},{"type":"text","raw":"用于新建一个标签，默认为","text":"用于新建一个标签，默认为"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"，也可以指定一个commit id；  ","text":"，也可以指定一个commit id；  "}]}]},{"type":"list_item","raw":"- 命令`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；  \n","task":false,"loose":false,"text":"命令`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；  ","tokens":[{"type":"text","raw":"命令`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；  ","text":"命令`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；  ","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git tag -a <tagname> -m \"blablabla...\"`","text":"git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;"},{"type":"text","raw":"可以指定标签信息；  ","text":"可以指定标签信息；  "}]}]},{"type":"list_item","raw":"- 命令`git tag`可以查看所有标签。  \n","task":false,"loose":false,"text":"命令`git tag`可以查看所有标签。  ","tokens":[{"type":"text","raw":"命令`git tag`可以查看所有标签。  ","text":"命令`git tag`可以查看所有标签。  ","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git tag`","text":"git tag"},{"type":"text","raw":"可以查看所有标签。  ","text":"可以查看所有标签。  "}]}]},{"type":"list_item","raw":"- 命令`git push origin <tagname>`可以推送一个本地标签；  \n","task":false,"loose":false,"text":"命令`git push origin <tagname>`可以推送一个本地标签；  ","tokens":[{"type":"text","raw":"命令`git push origin <tagname>`可以推送一个本地标签；  ","text":"命令`git push origin <tagname>`可以推送一个本地标签；  ","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git push origin <tagname>`","text":"git push origin &lt;tagname&gt;"},{"type":"text","raw":"可以推送一个本地标签；  ","text":"可以推送一个本地标签；  "}]}]},{"type":"list_item","raw":"- 命令`git push origin --tags`可以推送全部未推送过的本地标签；  \n","task":false,"loose":false,"text":"命令`git push origin --tags`可以推送全部未推送过的本地标签；  ","tokens":[{"type":"text","raw":"命令`git push origin --tags`可以推送全部未推送过的本地标签；  ","text":"命令`git push origin --tags`可以推送全部未推送过的本地标签；  ","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git push origin --tags`","text":"git push origin --tags"},{"type":"text","raw":"可以推送全部未推送过的本地标签；  ","text":"可以推送全部未推送过的本地标签；  "}]}]},{"type":"list_item","raw":"- 命令`git tag -d <tagname>`可以删除一个本地标签；  \n","task":false,"loose":false,"text":"命令`git tag -d <tagname>`可以删除一个本地标签；  ","tokens":[{"type":"text","raw":"命令`git tag -d <tagname>`可以删除一个本地标签；  ","text":"命令`git tag -d <tagname>`可以删除一个本地标签；  ","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git tag -d <tagname>`","text":"git tag -d &lt;tagname&gt;"},{"type":"text","raw":"可以删除一个本地标签；  ","text":"可以删除一个本地标签；  "}]}]},{"type":"list_item","raw":"- 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  \n","task":false,"loose":false,"text":"命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  ","tokens":[{"type":"text","raw":"命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  ","text":"命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  ","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git push origin :refs/tags/<tagname>`","text":"git push origin :refs/tags/&lt;tagname&gt;"},{"type":"text","raw":"可以删除一个远程标签。  ","text":"可以删除一个远程标签。  "}]}]},{"type":"list_item","raw":"- *命令`git push origin -d tag tagName`也可以用来删除一个远程分支*","task":false,"loose":false,"text":"*命令`git push origin -d tag tagName`也可以用来删除一个远程分支*","tokens":[{"type":"text","raw":"*命令`git push origin -d tag tagName`也可以用来删除一个远程分支*","text":"*命令`git push origin -d tag tagName`也可以用来删除一个远程分支*","tokens":[{"type":"em","raw":"*命令`git push origin -d tag tagName`也可以用来删除一个远程分支*","text":"命令`git push origin -d tag tagName`也可以用来删除一个远程分支","tokens":[{"type":"text","raw":"命令","text":"命令"},{"type":"codespan","raw":"`git push origin -d tag tagName`","text":"git push origin -d tag tagName"},{"type":"text","raw":"也可以用来删除一个远程分支","text":"也可以用来删除一个远程分支"}]}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"paragraph","raw":"发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。  ","text":"发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。  ","tokens":[{"type":"text","raw":"发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。  ","text":"发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。  ","text":"Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。  ","tokens":[{"type":"text","raw":"Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。  ","text":"Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit tag v1.0 # 打标签  \n```  ","lang":"Bash","text":"git tag v1.0 # 打标签  "},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit tag v0.9 f52c633  \n```  ","lang":"Bash","text":"git tag v0.9 f52c633  "},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit tag -a v0.1 -m \"version 0.1 released\" 1094adb  \n```  ","lang":"Bash","text":"git tag -a v0.1 -m \"version 0.1 released\" 1094adb  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"查看某个标签的详细信息 `git show <tagname>`  ","text":"查看某个标签的详细信息 `git show <tagname>`  ","tokens":[{"type":"text","raw":"查看某个标签的详细信息 ","text":"查看某个标签的详细信息 "},{"type":"codespan","raw":"`git show <tagname>`","text":"git show &lt;tagname&gt;"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit show v0.9  \ncommit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 21:56:54 2018 +0800  \n  \n    add merge  \n  \ndiff --git a/readme.txt b/readme.txt  \n...  \n```  ","lang":"Bash","text":"git show v0.9  \ncommit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 21:56:54 2018 +0800  \n  \n    add merge  \n  \ndiff --git a/readme.txt b/readme.txt  \n...  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"查看标签  ","text":"查看标签  ","tokens":[{"type":"text","raw":"查看标签  ","text":"查看标签  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit tag  \nv1.0  \n```  ","lang":"Bash","text":"git tag  \nv1.0  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"删除标签  ","text":"删除标签  ","tokens":[{"type":"text","raw":"删除标签  ","text":"删除标签  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit tag -d v0.1  \nDeleted tag 'v0.1' (was f15b0dd)  \n```  ","lang":"Bash","text":"git tag -d v0.1  \nDeleted tag 'v0.1' (was f15b0dd)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"推送某个标签到远程  ","text":"推送某个标签到远程  ","tokens":[{"type":"text","raw":"推送某个标签到远程  ","text":"推送某个标签到远程  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit push origin v1.0  \nTotal 0 (delta 0), reused 0 (delta 0)  \nTo github.com:michaelliao/learngit.git  \n * [new tag]         v1.0 -> v1.0  \n```  ","lang":"Bash","text":"git push origin v1.0  \nTotal 0 (delta 0), reused 0 (delta 0)  \nTo github.com:michaelliao/learngit.git  \n * [new tag]         v1.0 -> v1.0  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"推送全部标签到远程  ","text":"推送全部标签到远程  ","tokens":[{"type":"text","raw":"推送全部标签到远程  ","text":"推送全部标签到远程  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit push origin --tags  \nTotal 0 (delta 0), reused 0 (delta 0)  \nTo github.com:michaelliao/learngit.git  \n * [new tag]         v0.9 -> v0.9  \n```  ","lang":"Bash","text":"git push origin --tags  \nTotal 0 (delta 0), reused 0 (delta 0)  \nTo github.com:michaelliao/learngit.git  \n * [new tag]         v0.9 -> v0.9  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"远程标签的删除（标签名和分支名不同名的情况）  ","text":"远程标签的删除（标签名和分支名不同名的情况）  ","tokens":[{"type":"text","raw":"远程标签的删除（标签名和分支名不同名的情况）  ","text":"远程标签的删除（标签名和分支名不同名的情况）  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"前提是先删除本地的tag `git tag -d v1.0`  ","text":"前提是先删除本地的tag `git tag -d v1.0`  ","tokens":[{"type":"text","raw":"前提是先删除本地的tag ","text":"前提是先删除本地的tag "},{"type":"codespan","raw":"`git tag -d v1.0`","text":"git tag -d v1.0"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit push --delete origin prod1.0  \n  \nTo https://github.com/myrepos/prod.git  \n - [deleted]         prod1.0  \n```  ","lang":"Bash","text":"git push --delete origin prod1.0  \n  \nTo https://github.com/myrepos/prod.git  \n - [deleted]         prod1.0  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"也可以用  ","text":"也可以用  ","tokens":[{"type":"text","raw":"也可以用  ","text":"也可以用  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"```Bash  \ngit push origin :refs/tags/prod1.0  \n  \nTo https://github.com/myrepos/prod.git  \n - [deleted]         prod1.0  \n```","lang":"Bash","text":"git push origin :refs/tags/prod1.0  \n  \nTo https://github.com/myrepos/prod.git  \n - [deleted]         prod1.0  "}],"tags":["git"],"date":"2024-01-08","series":"其他","title":"Git 标签","slug":"git-tag","keywords":"git tag","description":"git用法，git tag","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"list","raw":"- 查看分支：`git branch`  \n- 创建分支：`git branch <name>`  \n- 切换分支：`git checkout <name>`或者`git switch <name>`  \n- 创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  \n- 合并某分支到当前分支：`git merge <name>`  \n- 删除分支：`git branch -d <name>`","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- 查看分支：`git branch`  \n","task":false,"loose":false,"text":"查看分支：`git branch`  ","tokens":[{"type":"text","raw":"查看分支：`git branch`  ","text":"查看分支：`git branch`  ","tokens":[{"type":"text","raw":"查看分支：","text":"查看分支："},{"type":"codespan","raw":"`git branch`","text":"git branch"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 创建分支：`git branch <name>`  \n","task":false,"loose":false,"text":"创建分支：`git branch <name>`  ","tokens":[{"type":"text","raw":"创建分支：`git branch <name>`  ","text":"创建分支：`git branch <name>`  ","tokens":[{"type":"text","raw":"创建分支：","text":"创建分支："},{"type":"codespan","raw":"`git branch <name>`","text":"git branch &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 切换分支：`git checkout <name>`或者`git switch <name>`  \n","task":false,"loose":false,"text":"切换分支：`git checkout <name>`或者`git switch <name>`  ","tokens":[{"type":"text","raw":"切换分支：`git checkout <name>`或者`git switch <name>`  ","text":"切换分支：`git checkout <name>`或者`git switch <name>`  ","tokens":[{"type":"text","raw":"切换分支：","text":"切换分支："},{"type":"codespan","raw":"`git checkout <name>`","text":"git checkout &lt;name&gt;"},{"type":"text","raw":"或者","text":"或者"},{"type":"codespan","raw":"`git switch <name>`","text":"git switch &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  \n","task":false,"loose":false,"text":"创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  ","tokens":[{"type":"text","raw":"创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  ","text":"创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  ","tokens":[{"type":"text","raw":"创建+切换分支：","text":"创建+切换分支："},{"type":"codespan","raw":"`git checkout -b <name>`","text":"git checkout -b &lt;name&gt;"},{"type":"text","raw":"或者","text":"或者"},{"type":"codespan","raw":"`git switch -c <name>`","text":"git switch -c &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 合并某分支到当前分支：`git merge <name>`  \n","task":false,"loose":false,"text":"合并某分支到当前分支：`git merge <name>`  ","tokens":[{"type":"text","raw":"合并某分支到当前分支：`git merge <name>`  ","text":"合并某分支到当前分支：`git merge <name>`  ","tokens":[{"type":"text","raw":"合并某分支到当前分支：","text":"合并某分支到当前分支："},{"type":"codespan","raw":"`git merge <name>`","text":"git merge &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 删除分支：`git branch -d <name>`","task":false,"loose":false,"text":"删除分支：`git branch -d <name>`","tokens":[{"type":"text","raw":"删除分支：`git branch -d <name>`","text":"删除分支：`git branch -d <name>`","tokens":[{"type":"text","raw":"删除分支：","text":"删除分支："},{"type":"codespan","raw":"`git branch -d <name>`","text":"git branch -d &lt;name&gt;"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"paragraph","raw":"一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用`HEAD`指向`master`，就能确定当前分支，以及当前分支的提交点：  ","text":"一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用`HEAD`指向`master`，就能确定当前分支，以及当前分支的提交点：  ","tokens":[{"type":"text","raw":"一开始的时候，","text":"一开始的时候，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支是一条线，Git用","text":"分支是一条线，Git用"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指向最新的提交，再用","text":"指向最新的提交，再用"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"，就能确定当前分支，以及当前分支的提交点：  ","text":"，就能确定当前分支，以及当前分支的提交点：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                  HEAD  \n                    │  \n                    │  \n                    ▼  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n```  ","lang":"asciidoc","text":"                  HEAD  \n                    │  \n                    │  \n                    ▼  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"每次提交，`master`分支都会向前移动一步，这样，随着你不断提交，`master`分支的线也越来越长。  ","text":"每次提交，`master`分支都会向前移动一步，这样，随着你不断提交，`master`分支的线也越来越长。  ","tokens":[{"type":"text","raw":"每次提交，","text":"每次提交，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支都会向前移动一步，这样，随着你不断提交，","text":"分支都会向前移动一步，这样，随着你不断提交，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支的线也越来越长。  ","text":"分支的线也越来越长。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"当我们创建新的分支，例如`dev`时，Git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示当前分支在`dev`上：  ","text":"当我们创建新的分支，例如`dev`时，Git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示当前分支在`dev`上：  ","tokens":[{"type":"text","raw":"当我们创建新的分支，例如","text":"当我们创建新的分支，例如"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"时，Git新建了一个指针叫","text":"时，Git新建了一个指针叫"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"，指向","text":"，指向"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"相同的提交，再把","text":"相同的提交，再把"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"，就表示当前分支在","text":"，就表示当前分支在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"上：  ","text":"上：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n                    ▲  \n                    │  \n                    │  \n                   dev  \n                    ▲  \n                    │  \n                    │  \n                  HEAD  \n```  ","lang":"asciidoc","text":"                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n                    ▲  \n                    │  \n                    │  \n                   dev  \n                    ▲  \n                    │  \n                    │  \n                  HEAD  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"你看，Git创建一个分支很快，因为除了增加一个`dev`指针，改改`HEAD`的指向，工作区的文件都没有任何变化！  ","text":"你看，Git创建一个分支很快，因为除了增加一个`dev`指针，改改`HEAD`的指向，工作区的文件都没有任何变化！  ","tokens":[{"type":"text","raw":"你看，Git创建一个分支很快，因为除了增加一个","text":"你看，Git创建一个分支很快，因为除了增加一个"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"指针，改改","text":"指针，改改"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"的指向，工作区的文件都没有任何变化！  ","text":"的指向，工作区的文件都没有任何变化！  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"不过，从现在开始，对工作区的修改和提交就是针对`dev`分支了，比如新提交一次后，`dev`指针往前移动一步，而`master`指针不变：  ","text":"不过，从现在开始，对工作区的修改和提交就是针对`dev`分支了，比如新提交一次后，`dev`指针往前移动一步，而`master`指针不变：  ","tokens":[{"type":"text","raw":"不过，从现在开始，对工作区的修改和提交就是针对","text":"不过，从现在开始，对工作区的修改和提交就是针对"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支了，比如新提交一次后，","text":"分支了，比如新提交一次后，"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"指针往前移动一步，而","text":"指针往前移动一步，而"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指针不变：  ","text":"指针不变：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  \n                             ▲  \n                             │  \n                             │  \n                           HEAD  \n```  ","lang":"asciidoc","text":"                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  \n                             ▲  \n                             │  \n                             │  \n                           HEAD  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上。Git怎么合并呢？最简单的方法，就是直接把`master`指向`dev`的当前提交，就完成了合并：  ","text":"假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上。Git怎么合并呢？最简单的方法，就是直接把`master`指向`dev`的当前提交，就完成了合并：  ","tokens":[{"type":"text","raw":"假如我们在","text":"假如我们在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"上的工作完成了，就可以把","text":"上的工作完成了，就可以把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"合并到","text":"合并到"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"上。Git怎么合并呢？最简单的方法，就是直接把","text":"上。Git怎么合并呢？最简单的方法，就是直接把"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"的当前提交，就完成了合并：  ","text":"的当前提交，就完成了合并：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  \n```  ","lang":"asciidoc","text":"                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  ","text":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  ","tokens":[{"type":"text","raw":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  ","text":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"合并完分支后，甚至可以删除`dev`分支。删除`dev`分支就是把`dev`指针给删掉，删掉后，我们就剩下了一条`master`分支：  ","text":"合并完分支后，甚至可以删除`dev`分支。删除`dev`分支就是把`dev`指针给删掉，删掉后，我们就剩下了一条`master`分支：  ","tokens":[{"type":"text","raw":"合并完分支后，甚至可以删除","text":"合并完分支后，甚至可以删除"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支。删除","text":"分支。删除"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支就是把","text":"分支就是把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"指针给删掉，删掉后，我们就剩下了一条","text":"指针给删掉，删掉后，我们就剩下了一条"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n```  ","lang":"asciidoc","text":"                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  ","text":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  ","tokens":[{"type":"text","raw":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  ","text":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"下面开始实战。  ","text":"下面开始实战。  ","tokens":[{"type":"text","raw":"下面开始实战。  ","text":"下面开始实战。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"首先，我们创建`dev`分支，然后切换到`dev`分支：  ","text":"首先，我们创建`dev`分支，然后切换到`dev`分支：  ","tokens":[{"type":"text","raw":"首先，我们创建","text":"首先，我们创建"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支，然后切换到","text":"分支，然后切换到"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit checkout -b dev  \nSwitched to a new branch 'dev'  \n```  ","lang":"Bash","text":"git checkout -b dev  \nSwitched to a new branch 'dev'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：  ","text":"`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：  ","tokens":[{"type":"codespan","raw":"`git checkout`","text":"git checkout"},{"type":"text","raw":"命令加上","text":"命令加上"},{"type":"codespan","raw":"`-b`","text":"-b"},{"type":"text","raw":"参数表示创建并切换，相当于以下两条命令：  ","text":"参数表示创建并切换，相当于以下两条命令：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch dev  \ngit checkout dev  \nSwitched to branch 'dev'  \n```  ","lang":"Bash","text":"git branch dev  \ngit checkout dev  \nSwitched to branch 'dev'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"然后，用`git branch`命令查看当前分支：  ","text":"然后，用`git branch`命令查看当前分支：  ","tokens":[{"type":"text","raw":"然后，用","text":"然后，用"},{"type":"codespan","raw":"`git branch`","text":"git branch"},{"type":"text","raw":"命令查看当前分支：  ","text":"命令查看当前分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch  \n* dev  \n  master  \n```  ","lang":"Bash","text":"git branch  \n* dev  \n  master  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git branch`命令会列出所有分支，当前分支前面会标一个`*`号。  ","text":"`git branch`命令会列出所有分支，当前分支前面会标一个`*`号。  ","tokens":[{"type":"codespan","raw":"`git branch`","text":"git branch"},{"type":"text","raw":"命令会列出所有分支，当前分支前面会标一个","text":"命令会列出所有分支，当前分支前面会标一个"},{"type":"codespan","raw":"`*`","text":"*"},{"type":"text","raw":"号。  ","text":"号。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"然后，我们就可以在`dev`分支上正常提交，比如对`readme.txt`做个修改，加上一行：  ","text":"然后，我们就可以在`dev`分支上正常提交，比如对`readme.txt`做个修改，加上一行：  ","tokens":[{"type":"text","raw":"然后，我们就可以在","text":"然后，我们就可以在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上正常提交，比如对","text":"分支上正常提交，比如对"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"做个修改，加上一行：  ","text":"做个修改，加上一行：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick.  \n```  ","lang":"Bash","text":"Creating a new branch is quick.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"然后提交：  ","text":"然后提交：  ","tokens":[{"type":"text","raw":"然后提交：  ","text":"然后提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt   \ngit commit -m \"branch test\"  \n[dev b17d20e] branch test  \n 1 file changed, 1 insertion(+)  \n```  ","lang":"Bash","text":"git add readme.txt   \ngit commit -m \"branch test\"  \n[dev b17d20e] branch test  \n 1 file changed, 1 insertion(+)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，`dev`分支的工作完成，我们就可以切换回`master`分支：  ","text":"现在，`dev`分支的工作完成，我们就可以切换回`master`分支：  ","tokens":[{"type":"text","raw":"现在，","text":"现在，"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支的工作完成，我们就可以切换回","text":"分支的工作完成，我们就可以切换回"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit checkout master  \nSwitched to branch 'master'  \n```  ","lang":"Bash","text":"git checkout master  \nSwitched to branch 'master'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"切换回`master`分支后，再查看一个`readme.txt`文件，刚才添加的内容不见了！因为那个提交是在`dev`分支上，而`master`分支此刻的提交点并没有变：  ","text":"切换回`master`分支后，再查看一个`readme.txt`文件，刚才添加的内容不见了！因为那个提交是在`dev`分支上，而`master`分支此刻的提交点并没有变：  ","tokens":[{"type":"text","raw":"切换回","text":"切换回"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支后，再查看一个","text":"分支后，再查看一个"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"文件，刚才添加的内容不见了！因为那个提交是在","text":"文件，刚才添加的内容不见了！因为那个提交是在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上，而","text":"分支上，而"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支此刻的提交点并没有变：  ","text":"分支此刻的提交点并没有变：  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"![git-branch.png](../../static/images/git-branch.png)  ","text":"![git-branch.png](../../static/images/git-branch.png)  ","tokens":[{"type":"image","raw":"![git-branch.png](../../static/images/git-branch.png)","href":"../../static/images/git-branch.png","title":null,"text":"git-branch.png"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，我们把`dev`分支的工作成果合并到`master`分支上：  ","text":"现在，我们把`dev`分支的工作成果合并到`master`分支上：  ","tokens":[{"type":"text","raw":"现在，我们把","text":"现在，我们把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支的工作成果合并到","text":"分支的工作成果合并到"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支上：  ","text":"分支上：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit merge dev  \nUpdating d46f35e..b17d20e  \nFast-forward  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  \n```  ","lang":"Bash","text":"git merge dev  \nUpdating d46f35e..b17d20e  \nFast-forward  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git merge`命令用于合并指定分支到当前分支。合并后，再查看`readme.txt`的内容，就可以看到，和`dev`分支的最新提交是完全一样的。  ","text":"`git merge`命令用于合并指定分支到当前分支。合并后，再查看`readme.txt`的内容，就可以看到，和`dev`分支的最新提交是完全一样的。  ","tokens":[{"type":"codespan","raw":"`git merge`","text":"git merge"},{"type":"text","raw":"命令用于合并指定分支到当前分支。合并后，再查看","text":"命令用于合并指定分支到当前分支。合并后，再查看"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"的内容，就可以看到，和","text":"的内容，就可以看到，和"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支的最新提交是完全一样的。  ","text":"分支的最新提交是完全一样的。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"注意到上面的`Fast-forward`信息，Git告诉我们，这次合并是“快进模式”，也就是直接把`master`指向`dev`的当前提交，所以合并速度非常快。  ","text":"注意到上面的`Fast-forward`信息，Git告诉我们，这次合并是“快进模式”，也就是直接把`master`指向`dev`的当前提交，所以合并速度非常快。  ","tokens":[{"type":"text","raw":"注意到上面的","text":"注意到上面的"},{"type":"codespan","raw":"`Fast-forward`","text":"Fast-forward"},{"type":"text","raw":"信息，Git告诉我们，这次合并是“快进模式”，也就是直接把","text":"信息，Git告诉我们，这次合并是“快进模式”，也就是直接把"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"的当前提交，所以合并速度非常快。  ","text":"的当前提交，所以合并速度非常快。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"当然，也不是每次合并都能`Fast-forward`，我们后面会讲其他方式的合并。  ","text":"当然，也不是每次合并都能`Fast-forward`，我们后面会讲其他方式的合并。  ","tokens":[{"type":"text","raw":"当然，也不是每次合并都能","text":"当然，也不是每次合并都能"},{"type":"codespan","raw":"`Fast-forward`","text":"Fast-forward"},{"type":"text","raw":"，我们后面会讲其他方式的合并。  ","text":"，我们后面会讲其他方式的合并。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"合并完成后，就可以放心地删除`dev`分支了：  ","text":"合并完成后，就可以放心地删除`dev`分支了：  ","tokens":[{"type":"text","raw":"合并完成后，就可以放心地删除","text":"合并完成后，就可以放心地删除"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支了：  ","text":"分支了：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch -d dev  \nDeleted branch dev (was b17d20e).  \n```  ","lang":"Bash","text":"git branch -d dev  \nDeleted branch dev (was b17d20e).  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"删除后，查看`branch`，就只剩下`master`分支了：  ","text":"删除后，查看`branch`，就只剩下`master`分支了：  ","tokens":[{"type":"text","raw":"删除后，查看","text":"删除后，查看"},{"type":"codespan","raw":"`branch`","text":"branch"},{"type":"text","raw":"，就只剩下","text":"，就只剩下"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支了：  ","text":"分支了：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch  \n* master  \n```  ","lang":"Bash","text":"git branch  \n* master  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在`master`分支上工作效果是一样的，但过程更安全。  ","text":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在`master`分支上工作效果是一样的，但过程更安全。  ","tokens":[{"type":"text","raw":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在","text":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支上工作效果是一样的，但过程更安全。  ","text":"分支上工作效果是一样的，但过程更安全。  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### switch  \n","depth":3,"text":"switch","tokens":[{"type":"text","raw":"switch","text":"switch"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"我们注意到切换分支使用`git checkout <branch>`，而前面讲过的撤销修改则是`git checkout -- <file>`，同一个命令，有两种作用，确实有点令人迷惑。  ","text":"我们注意到切换分支使用`git checkout <branch>`，而前面讲过的撤销修改则是`git checkout -- <file>`，同一个命令，有两种作用，确实有点令人迷惑。  ","tokens":[{"type":"text","raw":"我们注意到切换分支使用","text":"我们注意到切换分支使用"},{"type":"codespan","raw":"`git checkout <branch>`","text":"git checkout &lt;branch&gt;"},{"type":"text","raw":"，而前面讲过的撤销修改则是","text":"，而前面讲过的撤销修改则是"},{"type":"codespan","raw":"`git checkout -- <file>`","text":"git checkout -- &lt;file&gt;"},{"type":"text","raw":"，同一个命令，有两种作用，确实有点令人迷惑。  ","text":"，同一个命令，有两种作用，确实有点令人迷惑。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"实际上，切换分支这个动作，用`switch`更科学。因此，最新版本的Git提供了新的`git switch`命令来切换分支：  ","text":"实际上，切换分支这个动作，用`switch`更科学。因此，最新版本的Git提供了新的`git switch`命令来切换分支：  ","tokens":[{"type":"text","raw":"实际上，切换分支这个动作，用","text":"实际上，切换分支这个动作，用"},{"type":"codespan","raw":"`switch`","text":"switch"},{"type":"text","raw":"更科学。因此，最新版本的Git提供了新的","text":"更科学。因此，最新版本的Git提供了新的"},{"type":"codespan","raw":"`git switch`","text":"git switch"},{"type":"text","raw":"命令来切换分支：  ","text":"命令来切换分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"创建并切换到新的`dev`分支，可以使用：  ","text":"创建并切换到新的`dev`分支，可以使用：  ","tokens":[{"type":"text","raw":"创建并切换到新的","text":"创建并切换到新的"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支，可以使用：  ","text":"分支，可以使用：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch -c dev  \n```  ","lang":"Bash","text":"git switch -c dev  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"直接切换到已有的`master`分支，可以使用：  ","text":"直接切换到已有的`master`分支，可以使用：  ","tokens":[{"type":"text","raw":"直接切换到已有的","text":"直接切换到已有的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支，可以使用：  ","text":"分支，可以使用：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch master  \n```  ","lang":"Bash","text":"git switch master  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"使用新的`git switch`命令，比`git checkout`要更容易理解。","text":"使用新的`git switch`命令，比`git checkout`要更容易理解。","tokens":[{"type":"text","raw":"使用新的","text":"使用新的"},{"type":"codespan","raw":"`git switch`","text":"git switch"},{"type":"text","raw":"命令，比","text":"命令，比"},{"type":"codespan","raw":"`git checkout`","text":"git checkout"},{"type":"text","raw":"要更容易理解。","text":"要更容易理解。"}]}],"tags":["git"],"date":"2024-01-08","series":"其他","title":"Git的分支管理","slug":"git-branch","keywords":"git branch","description":"git用法，git branch","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"[廖雪峰老师的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)  ","text":"[廖雪峰老师的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)  ","tokens":[{"type":"link","raw":"[廖雪峰老师的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)","href":"https://www.liaoxuefeng.com/wiki/896043488029600","title":null,"text":"廖雪峰老师的git教程","tokens":[{"type":"text","raw":"廖雪峰老师的git教程","text":"廖雪峰老师的git教程"}]},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git init` 初始化仓库  \n- `git add [file1 file2] / .` 添加到暂存区  \n- `git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  \n- `git status` 查看状态","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git init` 初始化仓库  \n","task":false,"loose":false,"text":"`git init` 初始化仓库  ","tokens":[{"type":"text","raw":"`git init` 初始化仓库  ","text":"`git init` 初始化仓库  ","tokens":[{"type":"codespan","raw":"`git init`","text":"git init"},{"type":"text","raw":" 初始化仓库  ","text":" 初始化仓库  "}]}]},{"type":"list_item","raw":"- `git add [file1 file2] / .` 添加到暂存区  \n","task":false,"loose":false,"text":"`git add [file1 file2] / .` 添加到暂存区  ","tokens":[{"type":"text","raw":"`git add [file1 file2] / .` 添加到暂存区  ","text":"`git add [file1 file2] / .` 添加到暂存区  ","tokens":[{"type":"codespan","raw":"`git add [file1 file2] / .`","text":"git add [file1 file2] / ."},{"type":"text","raw":" 添加到暂存区  ","text":" 添加到暂存区  "}]}]},{"type":"list_item","raw":"- `git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  \n","task":false,"loose":false,"text":"`git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  ","tokens":[{"type":"text","raw":"`git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  ","text":"`git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  ","tokens":[{"type":"codespan","raw":"`git commit -m [message]`","text":"git commit -m [message]"},{"type":"text","raw":" 将当前staged修改提交","text":" 将当前staged修改提交"},{"type":"codespan","raw":"`--amend`","text":"--amend"},{"type":"text","raw":"就会生成一条新的commit替换了原commit  ","text":"就会生成一条新的commit替换了原commit  "}]}]},{"type":"list_item","raw":"- `git status` 查看状态","task":false,"loose":false,"text":"`git status` 查看状态","tokens":[{"type":"text","raw":"`git status` 查看状态","text":"`git status` 查看状态","tokens":[{"type":"codespan","raw":"`git status`","text":"git status"},{"type":"text","raw":" 查看状态","text":" 查看状态"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit status  \nOn branch master  \nChanges not staged for commit:  \n  (use \"git add <file>...\" to update what will be committed)  \n  (use \"git checkout -- <file>...\" to discard changes in working directory)  \n  \n    modified:   readme.txt  \n  \nUntracked files:  \n  (use \"git add <file>...\" to include in what will be committed)  \n  \n    LICENSE  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  \n```  ","lang":"Bash","text":"git status  \nOn branch master  \nChanges not staged for commit:  \n  (use \"git add <file>...\" to update what will be committed)  \n  (use \"git checkout -- <file>...\" to discard changes in working directory)  \n  \n    modified:   readme.txt  \n  \nUntracked files:  \n  (use \"git add <file>...\" to include in what will be committed)  \n  \n    LICENSE  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  "},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","task":false,"loose":false,"text":"`git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","tokens":[{"type":"text","raw":"`git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","text":"`git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","tokens":[{"type":"codespan","raw":"`git log`","text":"git log"},{"type":"text","raw":" 查看历史记录 ","text":" 查看历史记录 "},{"type":"codespan","raw":"`--pretty=oneline`","text":"--pretty=oneline"},{"type":"text","raw":" 加上他一行展示信息","text":" 加上他一行展示信息"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit log  \ncommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -> master)  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 21:03:36 2018 +0800  \n  \n    add distributed  \n  \ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 20:59:18 2018 +0800  \n  \n    wrote a readme file  \n```  ","lang":"Bash","text":"git log  \ncommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -> master)  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 21:03:36 2018 +0800  \n  \n    add distributed  \n  \ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 20:59:18 2018 +0800  \n  \n    wrote a readme file  "},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git reflog` 记录你的每一次命令","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git reflog` 记录你的每一次命令","task":false,"loose":false,"text":"`git reflog` 记录你的每一次命令","tokens":[{"type":"text","raw":"`git reflog` 记录你的每一次命令","text":"`git reflog` 记录你的每一次命令","tokens":[{"type":"codespan","raw":"`git reflog`","text":"git reflog"},{"type":"text","raw":" 记录你的每一次命令","text":" 记录你的每一次命令"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit reflog  \n  \ne475afc HEAD@{1}: reset: moving to HEAD^  \n1094adb (HEAD -> master) HEAD@{2}: commit: append GPL  \ne475afc HEAD@{3}: commit: add distributed  \neaadf4e HEAD@{4}: commit (initial): wrote a readme file  \n```  ","lang":"Bash","text":"git reflog  \n  \ne475afc HEAD@{1}: reset: moving to HEAD^  \n1094adb (HEAD -> master) HEAD@{2}: commit: append GPL  \ne475afc HEAD@{3}: commit: add distributed  \neaadf4e HEAD@{4}: commit (initial): wrote a readme file  "},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git diff` 比对改动","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git diff` 比对改动","task":false,"loose":false,"text":"`git diff` 比对改动","tokens":[{"type":"text","raw":"`git diff` 比对改动","text":"`git diff` 比对改动","tokens":[{"type":"codespan","raw":"`git diff`","text":"git diff"},{"type":"text","raw":" 比对改动","text":" 比对改动"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit diff readme.txt   \ndiff --git a/readme.txt b/readme.txt  \nindex 46d49bf..9247db6 100644  \n--- a/readme.txt  \n+++ b/readme.txt  \n@@ -1,2 +1,2 @@  \n-Git is a version control system.  \n+Git is a distributed version control system.  \n Git is free software.  \n```  \n","lang":"Bash","text":"git diff readme.txt   \ndiff --git a/readme.txt b/readme.txt  \nindex 46d49bf..9247db6 100644  \n--- a/readme.txt  \n+++ b/readme.txt  \n@@ -1,2 +1,2 @@  \n-Git is a version control system.  \n+Git is a distributed version control system.  \n Git is free software.  "},{"type":"heading","raw":"### 回退版本  \n","depth":3,"text":"回退版本","tokens":[{"type":"text","raw":"回退版本","text":"回退版本"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"首先，Git必须知道当前版本是哪个版本，在Git中，用`HEAD`表示当前版本，也就是最新的提交`1094adb...`（注意我的提交ID和你的肯定不一样），上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。  ","text":"首先，Git必须知道当前版本是哪个版本，在Git中，用`HEAD`表示当前版本，也就是最新的提交`1094adb...`（注意我的提交ID和你的肯定不一样），上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。  ","tokens":[{"type":"text","raw":"首先，Git必须知道当前版本是哪个版本，在Git中，用","text":"首先，Git必须知道当前版本是哪个版本，在Git中，用"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"表示当前版本，也就是最新的提交","text":"表示当前版本，也就是最新的提交"},{"type":"codespan","raw":"`1094adb...`","text":"1094adb..."},{"type":"text","raw":"（注意我的提交ID和你的肯定不一样），上一个版本就是","text":"（注意我的提交ID和你的肯定不一样），上一个版本就是"},{"type":"codespan","raw":"`HEAD^`","text":"HEAD^"},{"type":"text","raw":"，上上一个版本就是","text":"，上上一个版本就是"},{"type":"codespan","raw":"`HEAD^^`","text":"HEAD^^"},{"type":"text","raw":"，当然往上100个版本写100个","text":"，当然往上100个版本写100个"},{"type":"codespan","raw":"`^`","text":"^"},{"type":"text","raw":"比较容易数不过来，所以写成","text":"比较容易数不过来，所以写成"},{"type":"codespan","raw":"`HEAD~100`","text":"HEAD~100"},{"type":"text","raw":"。  ","text":"。  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git reset --hard HEAD^` 回退到上一个版本   \n- `git reset --hard commitId` 回退到指定commit，说重置应该更为准确","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git reset --hard HEAD^` 回退到上一个版本   \n","task":false,"loose":false,"text":"`git reset --hard HEAD^` 回退到上一个版本   ","tokens":[{"type":"text","raw":"`git reset --hard HEAD^` 回退到上一个版本   ","text":"`git reset --hard HEAD^` 回退到上一个版本   ","tokens":[{"type":"codespan","raw":"`git reset --hard HEAD^`","text":"git reset --hard HEAD^"},{"type":"text","raw":" 回退到上一个版本   ","text":" 回退到上一个版本   "}]}]},{"type":"list_item","raw":"- `git reset --hard commitId` 回退到指定commit，说重置应该更为准确","task":false,"loose":false,"text":"`git reset --hard commitId` 回退到指定commit，说重置应该更为准确","tokens":[{"type":"text","raw":"`git reset --hard commitId` 回退到指定commit，说重置应该更为准确","text":"`git reset --hard commitId` 回退到指定commit，说重置应该更为准确","tokens":[{"type":"codespan","raw":"`git reset --hard commitId`","text":"git reset --hard commitId"},{"type":"text","raw":" 回退到指定commit，说重置应该更为准确","text":" 回退到指定commit，说重置应该更为准确"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"heading","raw":"### 撤销修改  \n","depth":3,"text":"撤销修改","tokens":[{"type":"text","raw":"撤销修改","text":"撤销修改"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \ngit checkout -- readme.txt  \n```  ","lang":"Bash","text":"git checkout -- readme.txt  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  ","text":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  ","tokens":[{"type":"text","raw":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  ","text":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n  \n- 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","ordered":false,"start":"","loose":true,"items":[{"type":"list_item","raw":"- 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n  \n","task":false,"loose":true,"text":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n","tokens":[{"type":"text","raw":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n","text":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  ","tokens":[{"type":"text","raw":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  ","text":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  "}]}]},{"type":"list_item","raw":"- 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","task":false,"loose":true,"text":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","tokens":[{"type":"text","raw":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","text":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","tokens":[{"type":"text","raw":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","text":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"paragraph","raw":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  ","text":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  ","tokens":[{"type":"text","raw":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  ","text":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git checkout -- file`命令中的`--`很重要，没有`--`，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到`git checkout`命令。  ","text":"`git checkout -- file`命令中的`--`很重要，没有`--`，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到`git checkout`命令。  ","tokens":[{"type":"codespan","raw":"`git checkout -- file`","text":"git checkout -- file"},{"type":"text","raw":"命令中的","text":"命令中的"},{"type":"codespan","raw":"`--`","text":"--"},{"type":"text","raw":"很重要，没有","text":"很重要，没有"},{"type":"codespan","raw":"`--`","text":"--"},{"type":"text","raw":"，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到","text":"，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到"},{"type":"codespan","raw":"`git checkout`","text":"git checkout"},{"type":"text","raw":"命令。  ","text":"命令。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"如果已经`git add`到暂存区了，需要先执行`git reset --hard HEAD file`将文件修改撤销掉（unstage）之后在执行 `git checkout -- file`  ","text":"如果已经`git add`到暂存区了，需要先执行`git reset --hard HEAD file`将文件修改撤销掉（unstage）之后在执行 `git checkout -- file`  ","tokens":[{"type":"text","raw":"如果已经","text":"如果已经"},{"type":"codespan","raw":"`git add`","text":"git add"},{"type":"text","raw":"到暂存区了，需要先执行","text":"到暂存区了，需要先执行"},{"type":"codespan","raw":"`git reset --hard HEAD file`","text":"git reset --hard HEAD file"},{"type":"text","raw":"将文件修改撤销掉（unstage）之后在执行 ","text":"将文件修改撤销掉（unstage）之后在执行 "},{"type":"codespan","raw":"`git checkout -- file`","text":"git checkout -- file"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n  \n"},{"type":"paragraph","raw":"撤销操作汇总：  ","text":"撤销操作汇总：  ","tokens":[{"type":"text","raw":"撤销操作汇总：  ","text":"撤销操作汇总：  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- 情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  \n- 情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  \n- 情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- 情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  \n","task":false,"loose":false,"text":"情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  ","tokens":[{"type":"text","raw":"情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  ","text":"情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  ","tokens":[{"type":"text","raw":"情况1：","text":"情况1："},{"type":"strong","raw":"**文件只在工作区操作，未add**","text":"文件只在工作区操作，未add","tokens":[{"type":"text","raw":"文件只在工作区操作，未add","text":"文件只在工作区操作，未add"}]},{"type":"text","raw":"。撤销操作：","text":"。撤销操作："},{"type":"codespan","raw":"`git restore <file>`","text":"git restore &lt;file&gt;"},{"type":"text","raw":"。结果：工作区文件回退*。  ","text":"。结果：工作区文件回退*。  "}]}]},{"type":"list_item","raw":"- 情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  \n","task":false,"loose":false,"text":"情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  ","tokens":[{"type":"text","raw":"情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  ","text":"情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  ","tokens":[{"type":"text","raw":"情况2：","text":"情况2："},{"type":"strong","raw":"**文件已add，未commit**","text":"文件已add，未commit","tokens":[{"type":"text","raw":"文件已add，未commit","text":"文件已add，未commit"}]},{"type":"text","raw":"。撤销操作：","text":"。撤销操作："},{"type":"codespan","raw":"`git restore --staged <file>`","text":"git restore --staged &lt;file&gt;"},{"type":"text","raw":"。结果：","text":"。结果："},{"type":"strong","raw":"**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**","text":"暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。","tokens":[{"type":"text","raw":"暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。","text":"暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。"}]},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","task":false,"loose":false,"text":"情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","tokens":[{"type":"text","raw":"情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","text":"情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","tokens":[{"type":"text","raw":"情况3：","text":"情况3："},{"type":"strong","raw":"**文件已add，已commit**","text":"文件已add，已commit","tokens":[{"type":"text","raw":"文件已add，已commit","text":"文件已add，已commit"}]},{"type":"text","raw":"。撤销操作：","text":"。撤销操作："},{"type":"strong","raw":"**git reset --hard commit_id**","text":"git reset --hard commit_id","tokens":[{"type":"text","raw":"git reset --hard commit_id","text":"git reset --hard commit_id"}]},{"type":"text","raw":"。结果：","text":"。结果："},{"type":"strong","raw":"**工作区文件、暂存区文件、本地仓库都回退**","text":"工作区文件、暂存区文件、本地仓库都回退","tokens":[{"type":"text","raw":"工作区文件、暂存区文件、本地仓库都回退","text":"工作区文件、暂存区文件、本地仓库都回退"}]}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"heading","raw":"### 远程仓库配置  \n","depth":3,"text":"远程仓库配置","tokens":[{"type":"text","raw":"远程仓库配置","text":"远程仓库配置"}]},{"type":"heading","raw":"#### 生成公钥私钥  \n","depth":4,"text":"生成公钥私钥","tokens":[{"type":"text","raw":"生成公钥私钥","text":"生成公钥私钥"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \nssh-keygen -t rsa -C \"youremail@example.com\"  \n```  \n","lang":"Bash","text":"ssh-keygen -t rsa -C \"youremail@example.com\"  "},{"type":"paragraph","raw":"用户目录下的`.ssh`目录，里面有`id_rsa`和`id_rsa.pub`两个文件，这两个就是SSH Key的秘钥对，`id_rsa`是私钥，不能泄露出去，`id_rsa.pub`是公钥，可以放心地告诉任何人。  ","text":"用户目录下的`.ssh`目录，里面有`id_rsa`和`id_rsa.pub`两个文件，这两个就是SSH Key的秘钥对，`id_rsa`是私钥，不能泄露出去，`id_rsa.pub`是公钥，可以放心地告诉任何人。  ","tokens":[{"type":"text","raw":"用户目录下的","text":"用户目录下的"},{"type":"codespan","raw":"`.ssh`","text":".ssh"},{"type":"text","raw":"目录，里面有","text":"目录，里面有"},{"type":"codespan","raw":"`id_rsa`","text":"id_rsa"},{"type":"text","raw":"和","text":"和"},{"type":"codespan","raw":"`id_rsa.pub`","text":"id_rsa.pub"},{"type":"text","raw":"两个文件，这两个就是SSH Key的秘钥对，","text":"两个文件，这两个就是SSH Key的秘钥对，"},{"type":"codespan","raw":"`id_rsa`","text":"id_rsa"},{"type":"text","raw":"是私钥，不能泄露出去，","text":"是私钥，不能泄露出去，"},{"type":"codespan","raw":"`id_rsa.pub`","text":"id_rsa.pub"},{"type":"text","raw":"是公钥，可以放心地告诉任何人。  ","text":"是公钥，可以放心地告诉任何人。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  ","text":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  ","tokens":[{"type":"text","raw":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  ","text":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"将本地仓库关联远程仓库  ","text":"将本地仓库关联远程仓库  ","tokens":[{"type":"text","raw":"将本地仓库关联远程仓库  ","text":"将本地仓库关联远程仓库  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` shell  \ngit remote add origin git@github.com:192114/git-practice.git  \n```  ","lang":"shell","text":"git remote add origin git@github.com:192114/git-practice.git  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。  ","text":"添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。  ","tokens":[{"type":"text","raw":"添加后，远程库的名字就是","text":"添加后，远程库的名字就是"},{"type":"codespan","raw":"`origin`","text":"origin"},{"type":"text","raw":"，这是Git默认的叫法，也可以改成别的，但是","text":"，这是Git默认的叫法，也可以改成别的，但是"},{"type":"codespan","raw":"`origin`","text":"origin"},{"type":"text","raw":"这个名字一看就知道是远程库。  ","text":"这个名字一看就知道是远程库。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit push -u origin master  \nCounting objects: 20, done.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (15/15), done.  \nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.  \nTotal 20 (delta 5), reused 0 (delta 0)  \nremote: Resolving deltas: 100% (5/5), done.  \nTo github.com:michaelliao/learngit.git  \n * [new branch]      master -> master  \nBranch 'master' set up to track remote branch 'master' from 'origin'.  \n```  ","lang":"Bash","text":"git push -u origin master  \nCounting objects: 20, done.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (15/15), done.  \nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.  \nTotal 20 (delta 5), reused 0 (delta 0)  \nremote: Resolving deltas: 100% (5/5), done.  \nTo github.com:michaelliao/learngit.git  \n * [new branch]      master -> master  \nBranch 'master' set up to track remote branch 'master' from 'origin'.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。  ","text":"由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。  ","tokens":[{"type":"text","raw":"由于远程库是空的，我们第一次推送","text":"由于远程库是空的，我们第一次推送"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支时，加上了","text":"分支时，加上了"},{"type":"codespan","raw":"`-u`","text":"-u"},{"type":"text","raw":"参数，Git不但会把本地的","text":"参数，Git不但会把本地的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支内容推送的远程新的","text":"分支内容推送的远程新的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支，还会把本地的","text":"分支，还会把本地的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支和远程的","text":"分支和远程的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支关联起来，在以后的推送或者拉取时就可以简化命令。  ","text":"分支关联起来，在以后的推送或者拉取时就可以简化命令。  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"#### 删除远程库  \n","depth":4,"text":"删除远程库","tokens":[{"type":"text","raw":"删除远程库","text":"删除远程库"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \ngit remote -v  \norigin  git@github.com:192114/git-practice.git (fetch)  \norigin  git@github.com:192114/git-practice.git (push)  \n```  ","lang":"Bash","text":"git remote -v  \norigin  git@github.com:192114/git-practice.git (fetch)  \norigin  git@github.com:192114/git-practice.git (push)  "},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit remote rm origin  \n```  ","lang":"Bash","text":"git remote rm origin  "},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"#### 从远端克隆  \n","depth":4,"text":"从远端克隆","tokens":[{"type":"text","raw":"从远端克隆","text":"从远端克隆"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \ngit clone git@github.com:192114/gitskills.git  \nCloning into 'gitskills'...  \nremote: Counting objects: 3, done.  \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3  \nReceiving objects: 100% (3/3), done.  \n```  \n","lang":"Bash","text":"git clone git@github.com:192114/gitskills.git  \nCloning into 'gitskills'...  \nremote: Counting objects: 3, done.  \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3  \nReceiving objects: 100% (3/3), done.  "}],"tags":["git"],"date":"2023-12-25","series":"其他","title":"Git的基本用法","slug":"git-usage","keywords":"git基本用法","description":"git用法，git 基础用法","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"heading","raw":"### 插件  \n","depth":3,"text":"插件","tokens":[{"type":"text","raw":"插件","text":"插件"}]},{"type":"space","raw":"  \n"},{"type":"list","raw":"- better-comments 高亮注释  \n- vscode-tailwindcss tailwindcss 语法提示  \n- codeium AI代码提示  \n- vscode-eslint eslint语法校验  \n- prettier-vscode prettier 代码格式化  \n- todo-tree 记录todo标识   \n- git-graph git图形化显示提交信息  \n- vscode-language-pack-zh-hans 编辑器中文  \n- svg-preview svg 预览  \n- vscode-stylelint css 语法校验  \n- vscode-icons 图标  \n- volar vue 语法支持  \n- vscode-typescript-vue-plugin vue typescript 支持  \n- material-theme 编辑器主题","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- better-comments 高亮注释  \n","task":false,"loose":false,"text":"better-comments 高亮注释  ","tokens":[{"type":"text","raw":"better-comments 高亮注释  ","text":"better-comments 高亮注释  ","tokens":[{"type":"text","raw":"better-comments 高亮注释  ","text":"better-comments 高亮注释  "}]}]},{"type":"list_item","raw":"- vscode-tailwindcss tailwindcss 语法提示  \n","task":false,"loose":false,"text":"vscode-tailwindcss tailwindcss 语法提示  ","tokens":[{"type":"text","raw":"vscode-tailwindcss tailwindcss 语法提示  ","text":"vscode-tailwindcss tailwindcss 语法提示  ","tokens":[{"type":"text","raw":"vscode-tailwindcss tailwindcss 语法提示  ","text":"vscode-tailwindcss tailwindcss 语法提示  "}]}]},{"type":"list_item","raw":"- codeium AI代码提示  \n","task":false,"loose":false,"text":"codeium AI代码提示  ","tokens":[{"type":"text","raw":"codeium AI代码提示  ","text":"codeium AI代码提示  ","tokens":[{"type":"text","raw":"codeium AI代码提示  ","text":"codeium AI代码提示  "}]}]},{"type":"list_item","raw":"- vscode-eslint eslint语法校验  \n","task":false,"loose":false,"text":"vscode-eslint eslint语法校验  ","tokens":[{"type":"text","raw":"vscode-eslint eslint语法校验  ","text":"vscode-eslint eslint语法校验  ","tokens":[{"type":"text","raw":"vscode-eslint eslint语法校验  ","text":"vscode-eslint eslint语法校验  "}]}]},{"type":"list_item","raw":"- prettier-vscode prettier 代码格式化  \n","task":false,"loose":false,"text":"prettier-vscode prettier 代码格式化  ","tokens":[{"type":"text","raw":"prettier-vscode prettier 代码格式化  ","text":"prettier-vscode prettier 代码格式化  ","tokens":[{"type":"text","raw":"prettier-vscode prettier 代码格式化  ","text":"prettier-vscode prettier 代码格式化  "}]}]},{"type":"list_item","raw":"- todo-tree 记录todo标识   \n","task":false,"loose":false,"text":"todo-tree 记录todo标识   ","tokens":[{"type":"text","raw":"todo-tree 记录todo标识   ","text":"todo-tree 记录todo标识   ","tokens":[{"type":"text","raw":"todo-tree 记录todo标识   ","text":"todo-tree 记录todo标识   "}]}]},{"type":"list_item","raw":"- git-graph git图形化显示提交信息  \n","task":false,"loose":false,"text":"git-graph git图形化显示提交信息  ","tokens":[{"type":"text","raw":"git-graph git图形化显示提交信息  ","text":"git-graph git图形化显示提交信息  ","tokens":[{"type":"text","raw":"git-graph git图形化显示提交信息  ","text":"git-graph git图形化显示提交信息  "}]}]},{"type":"list_item","raw":"- vscode-language-pack-zh-hans 编辑器中文  \n","task":false,"loose":false,"text":"vscode-language-pack-zh-hans 编辑器中文  ","tokens":[{"type":"text","raw":"vscode-language-pack-zh-hans 编辑器中文  ","text":"vscode-language-pack-zh-hans 编辑器中文  ","tokens":[{"type":"text","raw":"vscode-language-pack-zh-hans 编辑器中文  ","text":"vscode-language-pack-zh-hans 编辑器中文  "}]}]},{"type":"list_item","raw":"- svg-preview svg 预览  \n","task":false,"loose":false,"text":"svg-preview svg 预览  ","tokens":[{"type":"text","raw":"svg-preview svg 预览  ","text":"svg-preview svg 预览  ","tokens":[{"type":"text","raw":"svg-preview svg 预览  ","text":"svg-preview svg 预览  "}]}]},{"type":"list_item","raw":"- vscode-stylelint css 语法校验  \n","task":false,"loose":false,"text":"vscode-stylelint css 语法校验  ","tokens":[{"type":"text","raw":"vscode-stylelint css 语法校验  ","text":"vscode-stylelint css 语法校验  ","tokens":[{"type":"text","raw":"vscode-stylelint css 语法校验  ","text":"vscode-stylelint css 语法校验  "}]}]},{"type":"list_item","raw":"- vscode-icons 图标  \n","task":false,"loose":false,"text":"vscode-icons 图标  ","tokens":[{"type":"text","raw":"vscode-icons 图标  ","text":"vscode-icons 图标  ","tokens":[{"type":"text","raw":"vscode-icons 图标  ","text":"vscode-icons 图标  "}]}]},{"type":"list_item","raw":"- volar vue 语法支持  \n","task":false,"loose":false,"text":"volar vue 语法支持  ","tokens":[{"type":"text","raw":"volar vue 语法支持  ","text":"volar vue 语法支持  ","tokens":[{"type":"text","raw":"volar vue 语法支持  ","text":"volar vue 语法支持  "}]}]},{"type":"list_item","raw":"- vscode-typescript-vue-plugin vue typescript 支持  \n","task":false,"loose":false,"text":"vscode-typescript-vue-plugin vue typescript 支持  ","tokens":[{"type":"text","raw":"vscode-typescript-vue-plugin vue typescript 支持  ","text":"vscode-typescript-vue-plugin vue typescript 支持  ","tokens":[{"type":"text","raw":"vscode-typescript-vue-plugin vue typescript 支持  ","text":"vscode-typescript-vue-plugin vue typescript 支持  "}]}]},{"type":"list_item","raw":"- material-theme 编辑器主题","task":false,"loose":false,"text":"material-theme 编辑器主题","tokens":[{"type":"text","raw":"material-theme 编辑器主题","text":"material-theme 编辑器主题","tokens":[{"type":"text","raw":"material-theme 编辑器主题","text":"material-theme 编辑器主题"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"heading","raw":"### 配置  \n","depth":3,"text":"配置","tokens":[{"type":"text","raw":"配置","text":"配置"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"```JSON  \n{  \n  \"workbench.colorTheme\": \"One Dark Pro Mix\",  \n  \"workbench.iconTheme\": \"vscode-icons\",  \n  \"editor.fontSize\": 18,  \n  \"editor.fontFamily\": \"'Hack Nerd Font Mono', Menlo, Monaco, 'Courier New', monospace\",  \n  \"editor.tabSize\": 2,  \n  \"editor.guides.bracketPairs\": true,  \n  \"editor.guides.bracketPairsHorizontal\": true,  \n  \"editor.wordWrap\": \"on\",  \n  \"editor.wordWrapColumn\": 100,  \n  \"workbench.startupEditor\": \"none\",  \n  \"terminal.integrated.cursorStyle\": \"line\",  \n  \"[typescriptreact]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[typescript]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[javascript]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[css]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"editor.fontLigatures\": true,  \n  \"[jsonc]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[json]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[html]\": {  \n    \"editor.defaultFormatter\": \"vscode.html-language-features\"  \n  },  \n  \"[javascriptreact]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"typescript.inlayHints.parameterNames.enabled\": \"all\",  \n  \"typescript.inlayHints.parameterTypes.enabled\": true,  \n  \"[vue]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[scss]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"codeium.enableConfig\": {  \n    \"*\": true,  \n    \"xml\": true,  \n    \"plaintext\": true  \n  },  \n  \"terminal.integrated.defaultProfile.windows\": \"PowerShell\",  \n  \"git.suggestSmartCommit\": false,  \n  \"terminal.integrated.fontFamily\": \"'Hack Nerd Font Mono', monospace\",  \n  \"terminal.integrated.env.linux\": {},  \n  \"window.restoreFullscreen\": true,  \n  \"workbench.tree.indent\": 16,  \n    \n  \"audioCues.diffLineDeleted\": \"off\",  \n  \"audioCues.chatResponsePending\": \"off\",  \n  \"audioCues.diffLineInserted\": \"off\",  \n  \"audioCues.diffLineModified\": \"off\",  \n  \"audioCues.lineHasBreakpoint\": \"off\",  \n  \"audioCues.lineHasError\": \"off\",  \n  \"audioCues.lineHasFoldedArea\": \"off\",  \n  \"audioCues.lineHasInlineSuggestion\": \"off\",  \n  \"audioCues.noInlayHints\": \"off\",  \n  \"audioCues.notebookCellCompleted\": \"off\",  \n  \"audioCues.notebookCellFailed\": \"off\",  \n  \"audioCues.onDebugBreak\": \"off\",  \n  \"audioCues.taskCompleted\": \"off\",  \n  \"audioCues.taskFailed\": \"off\",  \n  \"audioCues.terminalCommandFailed\": \"off\",  \n  \"audioCues.terminalQuickFix\": \"off\",  \n  \"audioCues.volume\": 0,  \n  \"accessibility.alert.format\": \"never\",  \n  \"accessibility.alert.save\": \"never\"  \n}  \n  \n```  ","lang":"JSON","text":"{  \n  \"workbench.colorTheme\": \"One Dark Pro Mix\",  \n  \"workbench.iconTheme\": \"vscode-icons\",  \n  \"editor.fontSize\": 18,  \n  \"editor.fontFamily\": \"'Hack Nerd Font Mono', Menlo, Monaco, 'Courier New', monospace\",  \n  \"editor.tabSize\": 2,  \n  \"editor.guides.bracketPairs\": true,  \n  \"editor.guides.bracketPairsHorizontal\": true,  \n  \"editor.wordWrap\": \"on\",  \n  \"editor.wordWrapColumn\": 100,  \n  \"workbench.startupEditor\": \"none\",  \n  \"terminal.integrated.cursorStyle\": \"line\",  \n  \"[typescriptreact]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[typescript]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[javascript]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[css]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"editor.fontLigatures\": true,  \n  \"[jsonc]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[json]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[html]\": {  \n    \"editor.defaultFormatter\": \"vscode.html-language-features\"  \n  },  \n  \"[javascriptreact]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"typescript.inlayHints.parameterNames.enabled\": \"all\",  \n  \"typescript.inlayHints.parameterTypes.enabled\": true,  \n  \"[vue]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"[scss]\": {  \n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"  \n  },  \n  \"codeium.enableConfig\": {  \n    \"*\": true,  \n    \"xml\": true,  \n    \"plaintext\": true  \n  },  \n  \"terminal.integrated.defaultProfile.windows\": \"PowerShell\",  \n  \"git.suggestSmartCommit\": false,  \n  \"terminal.integrated.fontFamily\": \"'Hack Nerd Font Mono', monospace\",  \n  \"terminal.integrated.env.linux\": {},  \n  \"window.restoreFullscreen\": true,  \n  \"workbench.tree.indent\": 16,  \n    \n  \"audioCues.diffLineDeleted\": \"off\",  \n  \"audioCues.chatResponsePending\": \"off\",  \n  \"audioCues.diffLineInserted\": \"off\",  \n  \"audioCues.diffLineModified\": \"off\",  \n  \"audioCues.lineHasBreakpoint\": \"off\",  \n  \"audioCues.lineHasError\": \"off\",  \n  \"audioCues.lineHasFoldedArea\": \"off\",  \n  \"audioCues.lineHasInlineSuggestion\": \"off\",  \n  \"audioCues.noInlayHints\": \"off\",  \n  \"audioCues.notebookCellCompleted\": \"off\",  \n  \"audioCues.notebookCellFailed\": \"off\",  \n  \"audioCues.onDebugBreak\": \"off\",  \n  \"audioCues.taskCompleted\": \"off\",  \n  \"audioCues.taskFailed\": \"off\",  \n  \"audioCues.terminalCommandFailed\": \"off\",  \n  \"audioCues.terminalQuickFix\": \"off\",  \n  \"audioCues.volume\": 0,  \n  \"accessibility.alert.format\": \"never\",  \n  \"accessibility.alert.save\": \"never\"  \n}  \n  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"*可打开编辑器的同步功能，直接同步自己的配置*","text":"*可打开编辑器的同步功能，直接同步自己的配置*","tokens":[{"type":"em","raw":"*可打开编辑器的同步功能，直接同步自己的配置*","text":"可打开编辑器的同步功能，直接同步自己的配置","tokens":[{"type":"text","raw":"可打开编辑器的同步功能，直接同步自己的配置","text":"可打开编辑器的同步功能，直接同步自己的配置"}]}]}],"tags":["computer"],"date":"2023-12-17","series":"Mac装机","title":"VS Code 配置","slug":"vscode-config","keywords":"Vscode","description":"Vscode配置，Vscode插件","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"heading","raw":"### 安装 [Homebrew](https://brew.sh/)  \n","depth":3,"text":"安装 [Homebrew](https://brew.sh/)","tokens":[{"type":"text","raw":"安装 ","text":"安装 "},{"type":"link","raw":"[Homebrew](https://brew.sh/)","href":"https://brew.sh/","title":null,"text":"Homebrew","tokens":[{"type":"text","raw":"Homebrew","text":"Homebrew"}]}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"  \n```  ","lang":"Bash","text":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"  "},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### 配置zsh（使用mac terminal）  \n","depth":3,"text":"配置zsh（使用mac terminal）","tokens":[{"type":"text","raw":"配置zsh（使用mac terminal）","text":"配置zsh（使用mac terminal）"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \n# ~/.zshenv  \n// 将homebrew写入环境变量  \neval \"$(/usr/local/bin/brew shellenv)\"  \n  \n# 快捷的cd命令 启发与z autojump  \neval \"$(zoxide init zsh --cmd cd)\"  \n  \n```  ","lang":"Bash","text":"# ~/.zshenv  \n// 将homebrew写入环境变量  \neval \"$(/usr/local/bin/brew shellenv)\"  \n  \n# 快捷的cd命令 启发与z autojump  \neval \"$(zoxide init zsh --cmd cd)\"  \n  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"zsh常见配置文件  \n","text":"zsh常见配置文件  ","tokens":[{"type":"text","raw":"zsh常见配置文件  ","text":"zsh常见配置文件  "}]},{"type":"list","raw":"1. .zshenv 通常放环境变量 任何时候都会被加载  \n2. .zshrc 交互式终端可用","ordered":true,"start":1,"loose":false,"items":[{"type":"list_item","raw":"1. .zshenv 通常放环境变量 任何时候都会被加载  \n","task":false,"loose":false,"text":".zshenv 通常放环境变量 任何时候都会被加载  ","tokens":[{"type":"text","raw":".zshenv 通常放环境变量 任何时候都会被加载  ","text":".zshenv 通常放环境变量 任何时候都会被加载  ","tokens":[{"type":"text","raw":".zshenv 通常放环境变量 任何时候都会被加载  ","text":".zshenv 通常放环境变量 任何时候都会被加载  "}]}]},{"type":"list_item","raw":"2. .zshrc 交互式终端可用","task":false,"loose":false,"text":".zshrc 交互式终端可用","tokens":[{"type":"text","raw":".zshrc 交互式终端可用","text":".zshrc 交互式终端可用","tokens":[{"type":"text","raw":".zshrc 交互式终端可用","text":".zshrc 交互式终端可用"}]}]}]},{"type":"space","raw":"   \n  \n"},{"type":"paragraph","raw":"加载顺序：`.zshenv `-> `.zprofile` if login ->` .zshrc` if interactive -> `.zlogin` if login -> `.zlogout`  ","text":"加载顺序：`.zshenv `-> `.zprofile` if login ->` .zshrc` if interactive -> `.zlogin` if login -> `.zlogout`  ","tokens":[{"type":"text","raw":"加载顺序：","text":"加载顺序："},{"type":"codespan","raw":"`.zshenv `","text":".zshenv "},{"type":"text","raw":"-> ","text":"-&gt; "},{"type":"codespan","raw":"`.zprofile`","text":".zprofile"},{"type":"text","raw":" if login ->","text":" if login -&gt;"},{"type":"codespan","raw":"` .zshrc`","text":" .zshrc"},{"type":"text","raw":" if interactive -> ","text":" if interactive -&gt; "},{"type":"codespan","raw":"`.zlogin`","text":".zlogin"},{"type":"text","raw":" if login -> ","text":" if login -&gt; "},{"type":"codespan","raw":"`.zlogout`","text":".zlogout"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n    \n"},{"type":"heading","raw":"### zsh插件管理 [zinit](https://github.com/zdharma-continuum/zinit#manual)   \n","depth":3,"text":"zsh插件管理 [zinit](https://github.com/zdharma-continuum/zinit#manual)","tokens":[{"type":"text","raw":"zsh插件管理 ","text":"zsh插件管理 "},{"type":"link","raw":"[zinit](https://github.com/zdharma-continuum/zinit#manual)","href":"https://github.com/zdharma-continuum/zinit#manual","title":null,"text":"zinit","tokens":[{"type":"text","raw":"zinit","text":"zinit"}]}]},{"type":"space","raw":"   \n"},{"type":"code","raw":"``` Bash  \n brew install zinit  \n```  ","lang":"Bash","text":" brew install zinit  "},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \n# .zshrc file  \n### Added by Zinit's installer  \n  \nsource \"/usr/local/opt/zinit/zinit.zsh\"  \n  \nautoload -Uz _zinit  \n  \n(( ${+_comps} )) && _comps[zinit]=_zinit  \n  \n### End of Zinit's installer chunk  \n  \n# pure 主题  \n  \nzinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'  \n  \nzinit light sindresorhus/pure  \n  \n# 语法高亮  \n  \nzinit ice lucid wait='0' atinit='zpcompinit'  \n  \nzinit light zdharma-continuum/fast-syntax-highlighting  \n  \n...  \n```  ","lang":"Bash","text":"# .zshrc file  \n### Added by Zinit's installer  \n  \nsource \"/usr/local/opt/zinit/zinit.zsh\"  \n  \nautoload -Uz _zinit  \n  \n(( ${+_comps} )) && _comps[zinit]=_zinit  \n  \n### End of Zinit's installer chunk  \n  \n# pure 主题  \n  \nzinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'  \n  \nzinit light sindresorhus/pure  \n  \n# 语法高亮  \n  \nzinit ice lucid wait='0' atinit='zpcompinit'  \n  \nzinit light zdharma-continuum/fast-syntax-highlighting  \n  \n...  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"zinit 语法说明  \n","text":"zinit 语法说明  ","tokens":[{"type":"text","raw":"zinit 语法说明  ","text":"zinit 语法说明  "}]},{"type":"list","raw":"- `zinit light <repo/plugin>` 加载插件 不追踪插件行为  \n- `zinit load <repo/plugin>` 加载插件 可用unload卸载 追踪插件行为 查看报告 卸载  \n- `zinit snippet URL` 加载本地或远程文件  \n- `zinit self-update` 自更新  \n- `zinit update --parallel number`更新插件  \n- `zinit ice wait=\"0\"` 等待0s  **ice**选项 表示只使用一次 对下一条命令起作用 **pick** 正则匹配第一个符合条件的文件 **src** 指定source的文件 **atinit** 在加载插件时需要执行的命令","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `zinit light <repo/plugin>` 加载插件 不追踪插件行为  \n","task":false,"loose":false,"text":"`zinit light <repo/plugin>` 加载插件 不追踪插件行为  ","tokens":[{"type":"text","raw":"`zinit light <repo/plugin>` 加载插件 不追踪插件行为  ","text":"`zinit light <repo/plugin>` 加载插件 不追踪插件行为  ","tokens":[{"type":"codespan","raw":"`zinit light <repo/plugin>`","text":"zinit light &lt;repo/plugin&gt;"},{"type":"text","raw":" 加载插件 不追踪插件行为  ","text":" 加载插件 不追踪插件行为  "}]}]},{"type":"list_item","raw":"- `zinit load <repo/plugin>` 加载插件 可用unload卸载 追踪插件行为 查看报告 卸载  \n","task":false,"loose":false,"text":"`zinit load <repo/plugin>` 加载插件 可用unload卸载 追踪插件行为 查看报告 卸载  ","tokens":[{"type":"text","raw":"`zinit load <repo/plugin>` 加载插件 可用unload卸载 追踪插件行为 查看报告 卸载  ","text":"`zinit load <repo/plugin>` 加载插件 可用unload卸载 追踪插件行为 查看报告 卸载  ","tokens":[{"type":"codespan","raw":"`zinit load <repo/plugin>`","text":"zinit load &lt;repo/plugin&gt;"},{"type":"text","raw":" 加载插件 可用unload卸载 追踪插件行为 查看报告 卸载  ","text":" 加载插件 可用unload卸载 追踪插件行为 查看报告 卸载  "}]}]},{"type":"list_item","raw":"- `zinit snippet URL` 加载本地或远程文件  \n","task":false,"loose":false,"text":"`zinit snippet URL` 加载本地或远程文件  ","tokens":[{"type":"text","raw":"`zinit snippet URL` 加载本地或远程文件  ","text":"`zinit snippet URL` 加载本地或远程文件  ","tokens":[{"type":"codespan","raw":"`zinit snippet URL`","text":"zinit snippet URL"},{"type":"text","raw":" 加载本地或远程文件  ","text":" 加载本地或远程文件  "}]}]},{"type":"list_item","raw":"- `zinit self-update` 自更新  \n","task":false,"loose":false,"text":"`zinit self-update` 自更新  ","tokens":[{"type":"text","raw":"`zinit self-update` 自更新  ","text":"`zinit self-update` 自更新  ","tokens":[{"type":"codespan","raw":"`zinit self-update`","text":"zinit self-update"},{"type":"text","raw":" 自更新  ","text":" 自更新  "}]}]},{"type":"list_item","raw":"- `zinit update --parallel number`更新插件  \n","task":false,"loose":false,"text":"`zinit update --parallel number`更新插件  ","tokens":[{"type":"text","raw":"`zinit update --parallel number`更新插件  ","text":"`zinit update --parallel number`更新插件  ","tokens":[{"type":"codespan","raw":"`zinit update --parallel number`","text":"zinit update --parallel number"},{"type":"text","raw":"更新插件  ","text":"更新插件  "}]}]},{"type":"list_item","raw":"- `zinit ice wait=\"0\"` 等待0s  **ice**选项 表示只使用一次 对下一条命令起作用 **pick** 正则匹配第一个符合条件的文件 **src** 指定source的文件 **atinit** 在加载插件时需要执行的命令","task":false,"loose":false,"text":"`zinit ice wait=\"0\"` 等待0s  **ice**选项 表示只使用一次 对下一条命令起作用 **pick** 正则匹配第一个符合条件的文件 **src** 指定source的文件 **atinit** 在加载插件时需要执行的命令","tokens":[{"type":"text","raw":"`zinit ice wait=\"0\"` 等待0s  **ice**选项 表示只使用一次 对下一条命令起作用 **pick** 正则匹配第一个符合条件的文件 **src** 指定source的文件 **atinit** 在加载插件时需要执行的命令","text":"`zinit ice wait=\"0\"` 等待0s  **ice**选项 表示只使用一次 对下一条命令起作用 **pick** 正则匹配第一个符合条件的文件 **src** 指定source的文件 **atinit** 在加载插件时需要执行的命令","tokens":[{"type":"codespan","raw":"`zinit ice wait=\"0\"`","text":"zinit ice wait=&quot;0&quot;"},{"type":"text","raw":" 等待0s  ","text":" 等待0s  "},{"type":"strong","raw":"**ice**","text":"ice","tokens":[{"type":"text","raw":"ice","text":"ice"}]},{"type":"text","raw":"选项 表示只使用一次 对下一条命令起作用 ","text":"选项 表示只使用一次 对下一条命令起作用 "},{"type":"strong","raw":"**pick**","text":"pick","tokens":[{"type":"text","raw":"pick","text":"pick"}]},{"type":"text","raw":" 正则匹配第一个符合条件的文件 ","text":" 正则匹配第一个符合条件的文件 "},{"type":"strong","raw":"**src**","text":"src","tokens":[{"type":"text","raw":"src","text":"src"}]},{"type":"text","raw":" 指定source的文件 ","text":" 指定source的文件 "},{"type":"strong","raw":"**atinit**","text":"atinit","tokens":[{"type":"text","raw":"atinit","text":"atinit"}]},{"type":"text","raw":" 在加载插件时需要执行的命令","text":" 在加载插件时需要执行的命令"}]}]}]},{"type":"space","raw":"  \n"},{"type":"heading","raw":"##### 插件  \n","depth":5,"text":"插件","tokens":[{"type":"text","raw":"插件","text":"插件"}]},{"type":"list","raw":"- [zdharma-continuum/fast-syntax-highlighting](https://github.com/zdharma-continuum/fast-syntax-highlighting) 语法高亮  \n- [ zdharma-continuum/history-search-multi-word](https://github.com/zdharma-continuum/history-search-multi-word) `ctrl+r` 选择输入匹配的语法  \n- [zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions) 补全 zsh 语法  \n- [zsh-users/zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 建议 提示之前的输入值  \n- [eza](https://github.com/eza-community/eza) 更好的ls 命令","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- [zdharma-continuum/fast-syntax-highlighting](https://github.com/zdharma-continuum/fast-syntax-highlighting) 语法高亮  \n","task":false,"loose":false,"text":"[zdharma-continuum/fast-syntax-highlighting](https://github.com/zdharma-continuum/fast-syntax-highlighting) 语法高亮  ","tokens":[{"type":"text","raw":"[zdharma-continuum/fast-syntax-highlighting](https://github.com/zdharma-continuum/fast-syntax-highlighting) 语法高亮  ","text":"[zdharma-continuum/fast-syntax-highlighting](https://github.com/zdharma-continuum/fast-syntax-highlighting) 语法高亮  ","tokens":[{"type":"link","raw":"[zdharma-continuum/fast-syntax-highlighting](https://github.com/zdharma-continuum/fast-syntax-highlighting)","href":"https://github.com/zdharma-continuum/fast-syntax-highlighting","title":null,"text":"zdharma-continuum/fast-syntax-highlighting","tokens":[{"type":"text","raw":"zdharma-continuum/fast-syntax-highlighting","text":"zdharma-continuum/fast-syntax-highlighting"}]},{"type":"text","raw":" 语法高亮  ","text":" 语法高亮  "}]}]},{"type":"list_item","raw":"- [ zdharma-continuum/history-search-multi-word](https://github.com/zdharma-continuum/history-search-multi-word) `ctrl+r` 选择输入匹配的语法  \n","task":false,"loose":false,"text":"[ zdharma-continuum/history-search-multi-word](https://github.com/zdharma-continuum/history-search-multi-word) `ctrl+r` 选择输入匹配的语法  ","tokens":[{"type":"text","raw":"[ zdharma-continuum/history-search-multi-word](https://github.com/zdharma-continuum/history-search-multi-word) `ctrl+r` 选择输入匹配的语法  ","text":"[ zdharma-continuum/history-search-multi-word](https://github.com/zdharma-continuum/history-search-multi-word) `ctrl+r` 选择输入匹配的语法  ","tokens":[{"type":"link","raw":"[ zdharma-continuum/history-search-multi-word](https://github.com/zdharma-continuum/history-search-multi-word)","href":"https://github.com/zdharma-continuum/history-search-multi-word","title":null,"text":" zdharma-continuum/history-search-multi-word","tokens":[{"type":"text","raw":" zdharma-continuum/history-search-multi-word","text":" zdharma-continuum/history-search-multi-word"}]},{"type":"text","raw":" ","text":" "},{"type":"codespan","raw":"`ctrl+r`","text":"ctrl+r"},{"type":"text","raw":" 选择输入匹配的语法  ","text":" 选择输入匹配的语法  "}]}]},{"type":"list_item","raw":"- [zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions) 补全 zsh 语法  \n","task":false,"loose":false,"text":"[zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions) 补全 zsh 语法  ","tokens":[{"type":"text","raw":"[zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions) 补全 zsh 语法  ","text":"[zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions) 补全 zsh 语法  ","tokens":[{"type":"link","raw":"[zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions)","href":"https://github.com/zsh-users/zsh-completions","title":null,"text":"zsh-users/zsh-completions","tokens":[{"type":"text","raw":"zsh-users/zsh-completions","text":"zsh-users/zsh-completions"}]},{"type":"text","raw":" 补全 zsh 语法  ","text":" 补全 zsh 语法  "}]}]},{"type":"list_item","raw":"- [zsh-users/zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 建议 提示之前的输入值  \n","task":false,"loose":false,"text":"[zsh-users/zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 建议 提示之前的输入值  ","tokens":[{"type":"text","raw":"[zsh-users/zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 建议 提示之前的输入值  ","text":"[zsh-users/zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 建议 提示之前的输入值  ","tokens":[{"type":"link","raw":"[zsh-users/zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)","href":"https://github.com/zsh-users/zsh-autosuggestions","title":null,"text":"zsh-users/zsh-autosuggestions","tokens":[{"type":"text","raw":"zsh-users/zsh-autosuggestions","text":"zsh-users/zsh-autosuggestions"}]},{"type":"text","raw":" 建议 提示之前的输入值  ","text":" 建议 提示之前的输入值  "}]}]},{"type":"list_item","raw":"- [eza](https://github.com/eza-community/eza) 更好的ls 命令","task":false,"loose":false,"text":"[eza](https://github.com/eza-community/eza) 更好的ls 命令","tokens":[{"type":"text","raw":"[eza](https://github.com/eza-community/eza) 更好的ls 命令","text":"[eza](https://github.com/eza-community/eza) 更好的ls 命令","tokens":[{"type":"link","raw":"[eza](https://github.com/eza-community/eza)","href":"https://github.com/eza-community/eza","title":null,"text":"eza","tokens":[{"type":"text","raw":"eza","text":"eza"}]},{"type":"text","raw":" 更好的ls 命令","text":" 更好的ls 命令"}]}]}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \nbrew install eza  \n# ~/.zshrc  \n# eza 别名  \n  \n# 带图标  \n  \nalias ls=\"eza --icons\"  \n  \n# 文件详情  \n  \nalias ll=\"eza --icons --long --header\"  \n  \n# 文件详情 包含隐藏文件  \n  \nalias la=\"eza --icons --long --header --all\"  \n  \n# 显示文件详情并带git信息  \n  \nalias lg=\"eza --icons --long --header --all --git\"  \n  \n# 关闭默认ls颜色  \n  \nDISABLE_LS_COLORS=true   \n  \n```  \n","lang":"Bash","text":"brew install eza  \n# ~/.zshrc  \n# eza 别名  \n  \n# 带图标  \n  \nalias ls=\"eza --icons\"  \n  \n# 文件详情  \n  \nalias ll=\"eza --icons --long --header\"  \n  \n# 文件详情 包含隐藏文件  \n  \nalias la=\"eza --icons --long --header --all\"  \n  \n# 显示文件详情并带git信息  \n  \nalias lg=\"eza --icons --long --header --all --git\"  \n  \n# 关闭默认ls颜色  \n  \nDISABLE_LS_COLORS=true   \n  "},{"type":"list","raw":"- [bat](https://github.com/sharkdp/bat/blob/master/doc/README-zh.md) 类似cat 但有语法高亮","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- [bat](https://github.com/sharkdp/bat/blob/master/doc/README-zh.md) 类似cat 但有语法高亮","task":false,"loose":false,"text":"[bat](https://github.com/sharkdp/bat/blob/master/doc/README-zh.md) 类似cat 但有语法高亮","tokens":[{"type":"text","raw":"[bat](https://github.com/sharkdp/bat/blob/master/doc/README-zh.md) 类似cat 但有语法高亮","text":"[bat](https://github.com/sharkdp/bat/blob/master/doc/README-zh.md) 类似cat 但有语法高亮","tokens":[{"type":"link","raw":"[bat](https://github.com/sharkdp/bat/blob/master/doc/README-zh.md)","href":"https://github.com/sharkdp/bat/blob/master/doc/README-zh.md","title":null,"text":"bat","tokens":[{"type":"text","raw":"bat","text":"bat"}]},{"type":"text","raw":" 类似cat 但有语法高亮","text":" 类似cat 但有语法高亮"}]}]}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \nbrew install bat  \n  \n#命令  \nbat /example/z.js -r 16 #显示文件 从第16行显示  \n  \n# ~/.config/bat.conf  \n--paging=never #不分页  \n--theme=\"Solarized (dark)\" # 主题  \n  \n# `bat --list-themes` 一份语法高亮主题的清单  \n```  \n","lang":"Bash","text":"brew install bat  \n  \n#命令  \nbat /example/z.js -r 16 #显示文件 从第16行显示  \n  \n# ~/.config/bat.conf  \n--paging=never #不分页  \n--theme=\"Solarized (dark)\" # 主题  \n  \n# `bat --list-themes` 一份语法高亮主题的清单  "},{"type":"list","raw":"- [ripgrep](https://github.com/BurntSushi/ripgrep) 命令行搜索工具","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- [ripgrep](https://github.com/BurntSushi/ripgrep) 命令行搜索工具","task":false,"loose":false,"text":"[ripgrep](https://github.com/BurntSushi/ripgrep) 命令行搜索工具","tokens":[{"type":"text","raw":"[ripgrep](https://github.com/BurntSushi/ripgrep) 命令行搜索工具","text":"[ripgrep](https://github.com/BurntSushi/ripgrep) 命令行搜索工具","tokens":[{"type":"link","raw":"[ripgrep](https://github.com/BurntSushi/ripgrep)","href":"https://github.com/BurntSushi/ripgrep","title":null,"text":"ripgrep","tokens":[{"type":"text","raw":"ripgrep","text":"ripgrep"}]},{"type":"text","raw":" 命令行搜索工具","text":" 命令行搜索工具"}]}]}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \nbrew install ripgrep  \n  \n#命令  \nrg const demo.js # 在demo.js 搜索const关键字  \nrg const\\w+ demo.js # 正则匹配内容  \n  \n# ~/.config/ripgrep.conf  \n #Don't let ripgrep vomit really long lines to my terminal, and show a preview.  \n--max-columns=150  \n--max-columns-preview   \n  \n# Add my 'web' type.  \n--type-add  \nweb:*.{html,css,js}*   \n  \n# Search hidden files / directories (e.g. dotfiles) by default  \n--hidden    \n  \n# Using glob patterns to include/exclude files or folders  \n--glob=!.git/*  \n  \n# or  \n--glob  \n!.git/*   \n  \n# Set the colors.  \n--colors=line:none  \n--colors=line:style:bold  \n  \n# Because who cares about case!?  \n--smart-case  \n```  ","lang":"Bash","text":"brew install ripgrep  \n  \n#命令  \nrg const demo.js # 在demo.js 搜索const关键字  \nrg const\\w+ demo.js # 正则匹配内容  \n  \n# ~/.config/ripgrep.conf  \n #Don't let ripgrep vomit really long lines to my terminal, and show a preview.  \n--max-columns=150  \n--max-columns-preview   \n  \n# Add my 'web' type.  \n--type-add  \nweb:*.{html,css,js}*   \n  \n# Search hidden files / directories (e.g. dotfiles) by default  \n--hidden    \n  \n# Using glob patterns to include/exclude files or folders  \n--glob=!.git/*  \n  \n# or  \n--glob  \n!.git/*   \n  \n# Set the colors.  \n--colors=line:none  \n--colors=line:style:bold  \n  \n# Because who cares about case!?  \n--smart-case  "},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### 修改terminal主题配色  \n","depth":3,"text":"修改terminal主题配色","tokens":[{"type":"text","raw":"修改terminal主题配色","text":"修改terminal主题配色"}]},{"type":"list","raw":"1. 左上角终端选偏好设置  \n2. 点击描述文件  \n3. [themes](https://github.com/lysyi3m/macos-terminal-themes)下载主题  \n4. 导入下载的主题  \n5. 点击使用主题","ordered":true,"start":1,"loose":false,"items":[{"type":"list_item","raw":"1. 左上角终端选偏好设置  \n","task":false,"loose":false,"text":"左上角终端选偏好设置  ","tokens":[{"type":"text","raw":"左上角终端选偏好设置  ","text":"左上角终端选偏好设置  ","tokens":[{"type":"text","raw":"左上角终端选偏好设置  ","text":"左上角终端选偏好设置  "}]}]},{"type":"list_item","raw":"2. 点击描述文件  \n","task":false,"loose":false,"text":"点击描述文件  ","tokens":[{"type":"text","raw":"点击描述文件  ","text":"点击描述文件  ","tokens":[{"type":"text","raw":"点击描述文件  ","text":"点击描述文件  "}]}]},{"type":"list_item","raw":"3. [themes](https://github.com/lysyi3m/macos-terminal-themes)下载主题  \n","task":false,"loose":false,"text":"[themes](https://github.com/lysyi3m/macos-terminal-themes)下载主题  ","tokens":[{"type":"text","raw":"[themes](https://github.com/lysyi3m/macos-terminal-themes)下载主题  ","text":"[themes](https://github.com/lysyi3m/macos-terminal-themes)下载主题  ","tokens":[{"type":"link","raw":"[themes](https://github.com/lysyi3m/macos-terminal-themes)","href":"https://github.com/lysyi3m/macos-terminal-themes","title":null,"text":"themes","tokens":[{"type":"text","raw":"themes","text":"themes"}]},{"type":"text","raw":"下载主题  ","text":"下载主题  "}]}]},{"type":"list_item","raw":"4. 导入下载的主题  \n","task":false,"loose":false,"text":"导入下载的主题  ","tokens":[{"type":"text","raw":"导入下载的主题  ","text":"导入下载的主题  ","tokens":[{"type":"text","raw":"导入下载的主题  ","text":"导入下载的主题  "}]}]},{"type":"list_item","raw":"5. 点击使用主题","task":false,"loose":false,"text":"点击使用主题","tokens":[{"type":"text","raw":"点击使用主题","text":"点击使用主题","tokens":[{"type":"text","raw":"点击使用主题","text":"点击使用主题"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"heading","raw":"### 安装字体  \n","depth":3,"text":"安装字体","tokens":[{"type":"text","raw":"安装字体","text":"安装字体"}]},{"type":"code","raw":"``` Bash  \nbrew tap homebrew/cask-fonts  \nbrew install font-hack-nerd-font  \n```  \n","lang":"Bash","text":"brew tap homebrew/cask-fonts  \nbrew install font-hack-nerd-font  "},{"type":"list","raw":"- terminal 描述文件 文本处切换字体   \n- vscode fontfamily 配置 字体 'Hack Nerd Font Mono' （terminal设置字体同理）","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- terminal 描述文件 文本处切换字体   \n","task":false,"loose":false,"text":"terminal 描述文件 文本处切换字体   ","tokens":[{"type":"text","raw":"terminal 描述文件 文本处切换字体   ","text":"terminal 描述文件 文本处切换字体   ","tokens":[{"type":"text","raw":"terminal 描述文件 文本处切换字体   ","text":"terminal 描述文件 文本处切换字体   "}]}]},{"type":"list_item","raw":"- vscode fontfamily 配置 字体 'Hack Nerd Font Mono' （terminal设置字体同理）","task":false,"loose":false,"text":"vscode fontfamily 配置 字体 'Hack Nerd Font Mono' （terminal设置字体同理）","tokens":[{"type":"text","raw":"vscode fontfamily 配置 字体 'Hack Nerd Font Mono' （terminal设置字体同理）","text":"vscode fontfamily 配置 字体 'Hack Nerd Font Mono' （terminal设置字体同理）","tokens":[{"type":"text","raw":"vscode fontfamily 配置 字体 'Hack Nerd Font Mono' （terminal设置字体同理）","text":"vscode fontfamily 配置 字体 &#39;Hack Nerd Font Mono&#39; （terminal设置字体同理）"}]}]}]},{"type":"space","raw":"  \n"},{"type":"heading","raw":"### 完整.zshrc  \n","depth":3,"text":"完整.zshrc","tokens":[{"type":"text","raw":"完整.zshrc","text":"完整.zshrc"}]},{"type":"code","raw":"``` Bash  \n### Added by Zinit's installer  \nsource \"/usr/local/opt/zinit/zinit.zsh\"  \nautoload -Uz _zinit  \n(( ${+_comps} )) && _comps[zinit]=_zinit  \n### End of Zinit's installer chunk  \n  \n# pure 主题  \nzinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'  \nzinit light sindresorhus/pure  \n  \n# 语法高亮  \nzinit ice lucid wait='0' atinit='zpcompinit'  \nzinit light zdharma-continuum/fast-syntax-highlighting  \n  \n# 搜索历史输入  \nzinit ice lucid wait='0'  \nzinit light zdharma-continuum/history-search-multi-word  \n  \n# 补全  \nzinit ice lucid wait='0'  \nzinit light zsh-users/zsh-completions  \n  \n# 自动建议  \nzinit ice wait lucid atload'_zsh_autosuggest_start'  \nzinit light zsh-users/zsh-autosuggestions  \n  \n# 加载 OMZ 框架及部分插件  \nzinit snippet OMZ::lib/completion.zsh  \nzinit snippet OMZ::lib/history.zsh  \nzinit snippet OMZ::lib/key-bindings.zsh  \nzinit snippet OMZ::lib/theme-and-appearance.zsh  \nzinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh  \nzinit snippet OMZ::plugins/sudo/sudo.plugin.zsh  \nzinit snippet OMZ::plugins/extract  \n    \nzinit ice lucid wait='1'  \nzinit snippet OMZ::plugins/git/git.plugin.zsh  \n  \n# alias 代理命令  \nalias proxy=\"export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;export ALL_PROXY=socks5://127.0.0.1:1080\"  \nalias unproxy=\"unset https_proxy http_proxy all_proxy\"  \n  \n# eza 别名  \n# 带图标  \nalias ls=\"eza --icons\"  \n# 文件详情  \nalias ll=\"eza --icons --long --header\"  \n# 文件详情 包含隐藏文件  \nalias la=\"eza --icons --long --header --all\"  \n# 显示文件详情并带git信息  \nalias lg=\"eza --icons --long --header --all --git\"  \n# 关闭默认ls颜色  \nDISABLE_LS_COLORS=true  \n    \n# 快捷清屏  \nalias cls=clear  \n  \n# volta 环境变量  \nexport VOLTA_HOME=\"$HOME/.volta\"  \nexport PATH=\"$VOLTA_HOME/bin:$PATH\"  \n  \n# bat 配置文件路径  \nexport BAT_CONFIG_PATH=\"$HOME/.config/bat.conf\"  \n  \n# ripgrep 配置文件路径  \nexport RIPGREP_CONFIG_PATH=\"$HOME/.config/ripgrep.conf\"  \n```","lang":"Bash","text":"### Added by Zinit's installer  \nsource \"/usr/local/opt/zinit/zinit.zsh\"  \nautoload -Uz _zinit  \n(( ${+_comps} )) && _comps[zinit]=_zinit  \n### End of Zinit's installer chunk  \n  \n# pure 主题  \nzinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'  \nzinit light sindresorhus/pure  \n  \n# 语法高亮  \nzinit ice lucid wait='0' atinit='zpcompinit'  \nzinit light zdharma-continuum/fast-syntax-highlighting  \n  \n# 搜索历史输入  \nzinit ice lucid wait='0'  \nzinit light zdharma-continuum/history-search-multi-word  \n  \n# 补全  \nzinit ice lucid wait='0'  \nzinit light zsh-users/zsh-completions  \n  \n# 自动建议  \nzinit ice wait lucid atload'_zsh_autosuggest_start'  \nzinit light zsh-users/zsh-autosuggestions  \n  \n# 加载 OMZ 框架及部分插件  \nzinit snippet OMZ::lib/completion.zsh  \nzinit snippet OMZ::lib/history.zsh  \nzinit snippet OMZ::lib/key-bindings.zsh  \nzinit snippet OMZ::lib/theme-and-appearance.zsh  \nzinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh  \nzinit snippet OMZ::plugins/sudo/sudo.plugin.zsh  \nzinit snippet OMZ::plugins/extract  \n    \nzinit ice lucid wait='1'  \nzinit snippet OMZ::plugins/git/git.plugin.zsh  \n  \n# alias 代理命令  \nalias proxy=\"export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;export ALL_PROXY=socks5://127.0.0.1:1080\"  \nalias unproxy=\"unset https_proxy http_proxy all_proxy\"  \n  \n# eza 别名  \n# 带图标  \nalias ls=\"eza --icons\"  \n# 文件详情  \nalias ll=\"eza --icons --long --header\"  \n# 文件详情 包含隐藏文件  \nalias la=\"eza --icons --long --header --all\"  \n# 显示文件详情并带git信息  \nalias lg=\"eza --icons --long --header --all --git\"  \n# 关闭默认ls颜色  \nDISABLE_LS_COLORS=true  \n    \n# 快捷清屏  \nalias cls=clear  \n  \n# volta 环境变量  \nexport VOLTA_HOME=\"$HOME/.volta\"  \nexport PATH=\"$VOLTA_HOME/bin:$PATH\"  \n  \n# bat 配置文件路径  \nexport BAT_CONFIG_PATH=\"$HOME/.config/bat.conf\"  \n  \n# ripgrep 配置文件路径  \nexport RIPGREP_CONFIG_PATH=\"$HOME/.config/ripgrep.conf\"  "}],"tags":["computer"],"date":"2023-12-16","series":"Mac装机","title":"装机指南 - Terminal zsh 配置","slug":"mac-terminal","keywords":"mac装机","description":"mac装机，terminal，zsh，volta","lastmod":"","share":"true"},{"otherTokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"heading","raw":"### VOLTA- javascript 工具链管理工具 主要用于node版本管理  \n","depth":3,"text":"VOLTA- javascript 工具链管理工具 主要用于node版本管理","tokens":[{"type":"text","raw":"VOLTA- javascript 工具链管理工具 主要用于node版本管理","text":"VOLTA- javascript 工具链管理工具 主要用于node版本管理"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"[VOLTA官网](https://github.com/volta-cli/volta)  ","text":"[VOLTA官网](https://github.com/volta-cli/volta)  ","tokens":[{"type":"link","raw":"[VOLTA官网](https://github.com/volta-cli/volta)","href":"https://github.com/volta-cli/volta","title":null,"text":"VOLTA官网","tokens":[{"type":"text","raw":"VOLTA官网","text":"VOLTA官网"}]},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"#### 安装  \n","depth":4,"text":"安装","tokens":[{"type":"text","raw":"安装","text":"安装"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \nbrew install   \n```  \n","lang":"Bash","text":"brew install   "},{"type":"heading","raw":"#### 配置环境变量  \n","depth":4,"text":"配置环境变量","tokens":[{"type":"text","raw":"配置环境变量","text":"配置环境变量"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \n# ~/.zshrc  \n...  \nexport VOLTA_HOME=\"$HOME/.volta\"  \nexport PATH=\"$VOLTA_HOME/bin:$PATH\"  \n...  \n```  ","lang":"Bash","text":"# ~/.zshrc  \n...  \nexport VOLTA_HOME=\"$HOME/.volta\"  \nexport PATH=\"$VOLTA_HOME/bin:$PATH\"  \n...  "},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"#### 常用命令  \n","depth":4,"text":"常用命令","tokens":[{"type":"text","raw":"常用命令","text":"常用命令"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \nvolta install node # 安装最新版的node  \nvolta install node@version # 安装指定版本的node  \n  \nvolta uninstall node@version # 卸载  \n  \nvolta pin node@12.20.2 # 指定项目使用node的版本  \nvolta pin yarn@1.19.2  \n# 会在package.json里添加  \n\"volta\": {  \n  \"node\": \"12.20.2\",  \n  \"yarn\": \"1.19.2\"  \n}  \n  \n```  ","lang":"Bash","text":"volta install node # 安装最新版的node  \nvolta install node@version # 安装指定版本的node  \n  \nvolta uninstall node@version # 卸载  \n  \nvolta pin node@12.20.2 # 指定项目使用node的版本  \nvolta pin yarn@1.19.2  \n# 会在package.json里添加  \n\"volta\": {  \n  \"node\": \"12.20.2\",  \n  \"yarn\": \"1.19.2\"  \n}  \n  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"*关注node的试验特性（包管理器的管理器） -  Corepack*  ","text":"*关注node的试验特性（包管理器的管理器） -  Corepack*  ","tokens":[{"type":"em","raw":"*关注node的试验特性（包管理器的管理器） -  Corepack*","text":"关注node的试验特性（包管理器的管理器） -  Corepack","tokens":[{"type":"text","raw":"关注node的试验特性（包管理器的管理器） -  Corepack","text":"关注node的试验特性（包管理器的管理器） -  Corepack"}]},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### 必备软件  \n","depth":3,"text":"必备软件","tokens":[{"type":"text","raw":"必备软件","text":"必备软件"}]},{"type":"space","raw":"  \n"},{"type":"list","raw":"1. vs code 编辑器  \n2. chrome 浏览器  \n3. inna 视频播放器  \n4. maccy 剪切板工具   \n5. obsidian 笔记工具  \n6. The Unarchiver 解压缩工具","ordered":true,"start":1,"loose":false,"items":[{"type":"list_item","raw":"1. vs code 编辑器  \n","task":false,"loose":false,"text":"vs code 编辑器  ","tokens":[{"type":"text","raw":"vs code 编辑器  ","text":"vs code 编辑器  ","tokens":[{"type":"text","raw":"vs code 编辑器  ","text":"vs code 编辑器  "}]}]},{"type":"list_item","raw":"2. chrome 浏览器  \n","task":false,"loose":false,"text":"chrome 浏览器  ","tokens":[{"type":"text","raw":"chrome 浏览器  ","text":"chrome 浏览器  ","tokens":[{"type":"text","raw":"chrome 浏览器  ","text":"chrome 浏览器  "}]}]},{"type":"list_item","raw":"3. inna 视频播放器  \n","task":false,"loose":false,"text":"inna 视频播放器  ","tokens":[{"type":"text","raw":"inna 视频播放器  ","text":"inna 视频播放器  ","tokens":[{"type":"text","raw":"inna 视频播放器  ","text":"inna 视频播放器  "}]}]},{"type":"list_item","raw":"4. maccy 剪切板工具   \n","task":false,"loose":false,"text":"maccy 剪切板工具   ","tokens":[{"type":"text","raw":"maccy 剪切板工具   ","text":"maccy 剪切板工具   ","tokens":[{"type":"text","raw":"maccy 剪切板工具   ","text":"maccy 剪切板工具   "}]}]},{"type":"list_item","raw":"5. obsidian 笔记工具  \n","task":false,"loose":false,"text":"obsidian 笔记工具  ","tokens":[{"type":"text","raw":"obsidian 笔记工具  ","text":"obsidian 笔记工具  ","tokens":[{"type":"text","raw":"obsidian 笔记工具  ","text":"obsidian 笔记工具  "}]}]},{"type":"list_item","raw":"6. The Unarchiver 解压缩工具","task":false,"loose":false,"text":"The Unarchiver 解压缩工具","tokens":[{"type":"text","raw":"The Unarchiver 解压缩工具","text":"The Unarchiver 解压缩工具","tokens":[{"type":"text","raw":"The Unarchiver 解压缩工具","text":"The Unarchiver 解压缩工具"}]}]}]}],"tags":["computer"],"date":"2023-12-15","series":"Mac装机","title":"装机指南 - 前端开发环境","slug":"mac-frontend","keywords":"mac装机","description":"mac装机，前端，brew","lastmod":"","share":"true"}]