{"html":"<hr>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">廖雪峰老师的git教程</a>  </p>\n<ul>\n<li><code>git init</code> 初始化仓库  </li>\n<li><code>git add [file1 file2] / .</code> 添加到暂存区  </li>\n<li><code>git commit -m [message]</code> 将当前staged修改提交<code>--amend</code>就会生成一条新的commit替换了原commit  </li>\n<li><code>git status</code> 查看状态</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git status  \nOn branch master  \nChanges not staged <span class=\"hljs-keyword\">for</span> commit:  \n  (use <span class=\"hljs-string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)  \n  (use <span class=\"hljs-string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"hljs-keyword\">in</span> working directory)  \n  \n    modified:   readme.txt  \n  \nUntracked files:  \n  (use <span class=\"hljs-string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"hljs-keyword\">in</span> what will be committed)  \n  \n    LICENSE  \n  \nno changes added to commit (use <span class=\"hljs-string\">\"git add\"</span> and/or <span class=\"hljs-string\">\"git commit -a\"</span>)  \n</code></pre><ul>\n<li><code>git log</code> 查看历史记录 <code>--pretty=oneline</code> 加上他一行展示信息</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git <span class=\"hljs-built_in\">log</span>  \ncommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)  \nAuthor: Michael Liao &lt;askxuefeng@gmail.com&gt;  \nDate:   Fri May 18 21:03:36 2018 +0800  \n  \n    add distributed  \n  \ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0  \nAuthor: Michael Liao &lt;askxuefeng@gmail.com&gt;  \nDate:   Fri May 18 20:59:18 2018 +0800  \n  \n    wrote a readme file  \n</code></pre><ul>\n<li><code>git reflog</code> 记录你的每一次命令</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git reflog  \n  \ne475afc HEAD@{1}: reset: moving to HEAD^  \n1094adb (HEAD -&gt; master) HEAD@{2}: commit: append GPL  \ne475afc HEAD@{3}: commit: add distributed  \neaadf4e HEAD@{4}: commit (initial): wrote a readme file  \n</code></pre><ul>\n<li><code>git diff</code> 比对改动</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git diff readme.txt   \ndiff --git a/readme.txt b/readme.txt  \nindex 46d49bf..9247db6 100644  \n--- a/readme.txt  \n+++ b/readme.txt  \n@@ -1,2 +1,2 @@  \n-Git is a version control system.  \n+Git is a distributed version control system.  \n Git is free software.  \n</code></pre><h3 id=\"anchor-回退版本\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-回退版本\"><span class=\"octicon octicon-link\"></span></a>\n        回退版本\n        </h3>\n<p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。  </p>\n<ul>\n<li><code>git reset --hard HEAD^</code> 回退到上一个版本   </li>\n<li><code>git reset --hard commitId</code> 回退到指定commit，说重置应该更为准确</li>\n</ul>\n<h3 id=\"anchor-撤销修改\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-撤销修改\"><span class=\"octicon octicon-link\"></span></a>\n        撤销修改\n        </h3>\n<pre><code class=\"hljs language-Bash\">git checkout -- readme.txt  \n</code></pre><p>命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  </p>\n<ul>\n<li><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  </p>\n</li>\n<li><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n</li>\n</ul>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。  </p>\n<p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。  </p>\n<p>如果已经<code>git add</code>到暂存区了，需要先执行<code>git reset --hard HEAD file</code>将文件修改撤销掉（unstage）之后在执行 <code>git checkout -- file</code>  </p>\n<p>撤销操作汇总：  </p>\n<ul>\n<li>情况1：<strong>文件只在工作区操作，未add</strong>。撤销操作：<code>git restore &lt;file&gt;</code>。结果：工作区文件回退*。  </li>\n<li>情况2：<strong>文件已add，未commit</strong>。撤销操作：<code>git restore --staged &lt;file&gt;</code>。结果：<strong>暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。</strong>  </li>\n<li>情况3：<strong>文件已add，已commit</strong>。撤销操作：<strong>git reset --hard commit_id</strong>。结果：<strong>工作区文件、暂存区文件、本地仓库都回退</strong></li>\n</ul>\n<h3 id=\"anchor-远程仓库配置\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-远程仓库配置\"><span class=\"octicon octicon-link\"></span></a>\n        远程仓库配置\n        </h3>\n<h4 id=\"anchor-生成公钥私钥\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-生成公钥私钥\"><span class=\"octicon octicon-link\"></span></a>\n        生成公钥私钥\n        </h4>\n<pre><code class=\"hljs language-Bash\">ssh-keygen -t rsa -C <span class=\"hljs-string\">\"youremail@example.com\"</span>  \n</code></pre><p>用户目录下的<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。  </p>\n<p>登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  </p>\n<p>将本地仓库关联远程仓库  </p>\n<pre><code class=\"hljs language-shell\">git remote add origin git@github.com:192114/git-practice.git  \n</code></pre><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。  </p>\n<pre><code class=\"hljs language-Bash\">git push -u origin master  \nCounting objects: 20, <span class=\"hljs-keyword\">done</span>.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (15/15), <span class=\"hljs-keyword\">done</span>.  \nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, <span class=\"hljs-keyword\">done</span>.  \nTotal 20 (delta 5), reused 0 (delta 0)  \nremote: Resolving deltas: 100% (5/5), <span class=\"hljs-keyword\">done</span>.  \nTo github.com:michaelliao/learngit.git  \n * [new branch]      master -&gt; master  \nBranch <span class=\"hljs-string\">'master'</span> <span class=\"hljs-built_in\">set</span> up to track remote branch <span class=\"hljs-string\">'master'</span> from <span class=\"hljs-string\">'origin'</span>.  \n</code></pre><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。  </p>\n<h4 id=\"anchor-删除远程库\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-删除远程库\"><span class=\"octicon octicon-link\"></span></a>\n        删除远程库\n        </h4>\n<pre><code class=\"hljs language-Bash\">git remote -v  \norigin  git@github.com:192114/git-practice.git (fetch)  \norigin  git@github.com:192114/git-practice.git (push)  \n</code></pre><pre><code class=\"hljs language-Bash\">git remote <span class=\"hljs-built_in\">rm</span> origin  \n</code></pre><h4 id=\"anchor-从远端克隆\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-从远端克隆\"><span class=\"octicon octicon-link\"></span></a>\n        从远端克隆\n        </h4>\n<pre><code class=\"hljs language-Bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:192114/gitskills.git  \nCloning into <span class=\"hljs-string\">'gitskills'</span>...  \nremote: Counting objects: 3, <span class=\"hljs-keyword\">done</span>.  \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3  \nReceiving objects: 100% (3/3), <span class=\"hljs-keyword\">done</span>.  \n</code></pre>","heading":[{"text":"回退版本","level":3,"id":"anchor-回退版本"},{"text":"撤销修改","level":3,"id":"anchor-撤销修改"},{"text":"远程仓库配置","level":3,"id":"anchor-远程仓库配置","children":[{"text":"生成公钥私钥","level":4,"id":"anchor-生成公钥私钥"},{"text":"删除远程库","level":4,"id":"anchor-删除远程库"},{"text":"从远端克隆","level":4,"id":"anchor-从远端克隆"}]}],"tokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"[廖雪峰老师的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)  ","text":"[廖雪峰老师的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)  ","tokens":[{"type":"link","raw":"[廖雪峰老师的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)","href":"https://www.liaoxuefeng.com/wiki/896043488029600","title":null,"text":"廖雪峰老师的git教程","tokens":[{"type":"text","raw":"廖雪峰老师的git教程","text":"廖雪峰老师的git教程"}]},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git init` 初始化仓库  \n- `git add [file1 file2] / .` 添加到暂存区  \n- `git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  \n- `git status` 查看状态","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git init` 初始化仓库  \n","task":false,"loose":false,"text":"`git init` 初始化仓库  ","tokens":[{"type":"text","raw":"`git init` 初始化仓库  ","text":"`git init` 初始化仓库  ","tokens":[{"type":"codespan","raw":"`git init`","text":"git init"},{"type":"text","raw":" 初始化仓库  ","text":" 初始化仓库  "}]}]},{"type":"list_item","raw":"- `git add [file1 file2] / .` 添加到暂存区  \n","task":false,"loose":false,"text":"`git add [file1 file2] / .` 添加到暂存区  ","tokens":[{"type":"text","raw":"`git add [file1 file2] / .` 添加到暂存区  ","text":"`git add [file1 file2] / .` 添加到暂存区  ","tokens":[{"type":"codespan","raw":"`git add [file1 file2] / .`","text":"git add [file1 file2] / ."},{"type":"text","raw":" 添加到暂存区  ","text":" 添加到暂存区  "}]}]},{"type":"list_item","raw":"- `git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  \n","task":false,"loose":false,"text":"`git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  ","tokens":[{"type":"text","raw":"`git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  ","text":"`git commit -m [message]` 将当前staged修改提交`--amend`就会生成一条新的commit替换了原commit  ","tokens":[{"type":"codespan","raw":"`git commit -m [message]`","text":"git commit -m [message]"},{"type":"text","raw":" 将当前staged修改提交","text":" 将当前staged修改提交"},{"type":"codespan","raw":"`--amend`","text":"--amend"},{"type":"text","raw":"就会生成一条新的commit替换了原commit  ","text":"就会生成一条新的commit替换了原commit  "}]}]},{"type":"list_item","raw":"- `git status` 查看状态","task":false,"loose":false,"text":"`git status` 查看状态","tokens":[{"type":"text","raw":"`git status` 查看状态","text":"`git status` 查看状态","tokens":[{"type":"codespan","raw":"`git status`","text":"git status"},{"type":"text","raw":" 查看状态","text":" 查看状态"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit status  \nOn branch master  \nChanges not staged for commit:  \n  (use \"git add <file>...\" to update what will be committed)  \n  (use \"git checkout -- <file>...\" to discard changes in working directory)  \n  \n    modified:   readme.txt  \n  \nUntracked files:  \n  (use \"git add <file>...\" to include in what will be committed)  \n  \n    LICENSE  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  \n```  ","lang":"Bash","text":"git status  \nOn branch master  \nChanges not staged for commit:  \n  (use \"git add <file>...\" to update what will be committed)  \n  (use \"git checkout -- <file>...\" to discard changes in working directory)  \n  \n    modified:   readme.txt  \n  \nUntracked files:  \n  (use \"git add <file>...\" to include in what will be committed)  \n  \n    LICENSE  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  "},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","task":false,"loose":false,"text":"`git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","tokens":[{"type":"text","raw":"`git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","text":"`git log` 查看历史记录 `--pretty=oneline` 加上他一行展示信息","tokens":[{"type":"codespan","raw":"`git log`","text":"git log"},{"type":"text","raw":" 查看历史记录 ","text":" 查看历史记录 "},{"type":"codespan","raw":"`--pretty=oneline`","text":"--pretty=oneline"},{"type":"text","raw":" 加上他一行展示信息","text":" 加上他一行展示信息"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit log  \ncommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -> master)  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 21:03:36 2018 +0800  \n  \n    add distributed  \n  \ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 20:59:18 2018 +0800  \n  \n    wrote a readme file  \n```  ","lang":"Bash","text":"git log  \ncommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -> master)  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 21:03:36 2018 +0800  \n  \n    add distributed  \n  \ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0  \nAuthor: Michael Liao <askxuefeng@gmail.com>  \nDate:   Fri May 18 20:59:18 2018 +0800  \n  \n    wrote a readme file  "},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git reflog` 记录你的每一次命令","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git reflog` 记录你的每一次命令","task":false,"loose":false,"text":"`git reflog` 记录你的每一次命令","tokens":[{"type":"text","raw":"`git reflog` 记录你的每一次命令","text":"`git reflog` 记录你的每一次命令","tokens":[{"type":"codespan","raw":"`git reflog`","text":"git reflog"},{"type":"text","raw":" 记录你的每一次命令","text":" 记录你的每一次命令"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit reflog  \n  \ne475afc HEAD@{1}: reset: moving to HEAD^  \n1094adb (HEAD -> master) HEAD@{2}: commit: append GPL  \ne475afc HEAD@{3}: commit: add distributed  \neaadf4e HEAD@{4}: commit (initial): wrote a readme file  \n```  ","lang":"Bash","text":"git reflog  \n  \ne475afc HEAD@{1}: reset: moving to HEAD^  \n1094adb (HEAD -> master) HEAD@{2}: commit: append GPL  \ne475afc HEAD@{3}: commit: add distributed  \neaadf4e HEAD@{4}: commit (initial): wrote a readme file  "},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git diff` 比对改动","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git diff` 比对改动","task":false,"loose":false,"text":"`git diff` 比对改动","tokens":[{"type":"text","raw":"`git diff` 比对改动","text":"`git diff` 比对改动","tokens":[{"type":"codespan","raw":"`git diff`","text":"git diff"},{"type":"text","raw":" 比对改动","text":" 比对改动"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"code","raw":"``` Bash  \ngit diff readme.txt   \ndiff --git a/readme.txt b/readme.txt  \nindex 46d49bf..9247db6 100644  \n--- a/readme.txt  \n+++ b/readme.txt  \n@@ -1,2 +1,2 @@  \n-Git is a version control system.  \n+Git is a distributed version control system.  \n Git is free software.  \n```  \n","lang":"Bash","text":"git diff readme.txt   \ndiff --git a/readme.txt b/readme.txt  \nindex 46d49bf..9247db6 100644  \n--- a/readme.txt  \n+++ b/readme.txt  \n@@ -1,2 +1,2 @@  \n-Git is a version control system.  \n+Git is a distributed version control system.  \n Git is free software.  "},{"type":"heading","raw":"### 回退版本  \n","depth":3,"text":"回退版本","tokens":[{"type":"text","raw":"回退版本","text":"回退版本"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"首先，Git必须知道当前版本是哪个版本，在Git中，用`HEAD`表示当前版本，也就是最新的提交`1094adb...`（注意我的提交ID和你的肯定不一样），上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。  ","text":"首先，Git必须知道当前版本是哪个版本，在Git中，用`HEAD`表示当前版本，也就是最新的提交`1094adb...`（注意我的提交ID和你的肯定不一样），上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。  ","tokens":[{"type":"text","raw":"首先，Git必须知道当前版本是哪个版本，在Git中，用","text":"首先，Git必须知道当前版本是哪个版本，在Git中，用"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"表示当前版本，也就是最新的提交","text":"表示当前版本，也就是最新的提交"},{"type":"codespan","raw":"`1094adb...`","text":"1094adb..."},{"type":"text","raw":"（注意我的提交ID和你的肯定不一样），上一个版本就是","text":"（注意我的提交ID和你的肯定不一样），上一个版本就是"},{"type":"codespan","raw":"`HEAD^`","text":"HEAD^"},{"type":"text","raw":"，上上一个版本就是","text":"，上上一个版本就是"},{"type":"codespan","raw":"`HEAD^^`","text":"HEAD^^"},{"type":"text","raw":"，当然往上100个版本写100个","text":"，当然往上100个版本写100个"},{"type":"codespan","raw":"`^`","text":"^"},{"type":"text","raw":"比较容易数不过来，所以写成","text":"比较容易数不过来，所以写成"},{"type":"codespan","raw":"`HEAD~100`","text":"HEAD~100"},{"type":"text","raw":"。  ","text":"。  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- `git reset --hard HEAD^` 回退到上一个版本   \n- `git reset --hard commitId` 回退到指定commit，说重置应该更为准确","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- `git reset --hard HEAD^` 回退到上一个版本   \n","task":false,"loose":false,"text":"`git reset --hard HEAD^` 回退到上一个版本   ","tokens":[{"type":"text","raw":"`git reset --hard HEAD^` 回退到上一个版本   ","text":"`git reset --hard HEAD^` 回退到上一个版本   ","tokens":[{"type":"codespan","raw":"`git reset --hard HEAD^`","text":"git reset --hard HEAD^"},{"type":"text","raw":" 回退到上一个版本   ","text":" 回退到上一个版本   "}]}]},{"type":"list_item","raw":"- `git reset --hard commitId` 回退到指定commit，说重置应该更为准确","task":false,"loose":false,"text":"`git reset --hard commitId` 回退到指定commit，说重置应该更为准确","tokens":[{"type":"text","raw":"`git reset --hard commitId` 回退到指定commit，说重置应该更为准确","text":"`git reset --hard commitId` 回退到指定commit，说重置应该更为准确","tokens":[{"type":"codespan","raw":"`git reset --hard commitId`","text":"git reset --hard commitId"},{"type":"text","raw":" 回退到指定commit，说重置应该更为准确","text":" 回退到指定commit，说重置应该更为准确"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"heading","raw":"### 撤销修改  \n","depth":3,"text":"撤销修改","tokens":[{"type":"text","raw":"撤销修改","text":"撤销修改"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \ngit checkout -- readme.txt  \n```  ","lang":"Bash","text":"git checkout -- readme.txt  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  ","text":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  ","tokens":[{"type":"text","raw":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  ","text":"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n  \n- 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","ordered":false,"start":"","loose":true,"items":[{"type":"list_item","raw":"- 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n  \n","task":false,"loose":true,"text":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n","tokens":[{"type":"text","raw":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  \n","text":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  ","tokens":[{"type":"text","raw":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  ","text":"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  "}]}]},{"type":"list_item","raw":"- 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","task":false,"loose":true,"text":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","tokens":[{"type":"text","raw":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","text":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","tokens":[{"type":"text","raw":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。","text":"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"paragraph","raw":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  ","text":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  ","tokens":[{"type":"text","raw":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  ","text":"总之，就是让这个文件回到最近一次git commit或git add时的状态。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git checkout -- file`命令中的`--`很重要，没有`--`，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到`git checkout`命令。  ","text":"`git checkout -- file`命令中的`--`很重要，没有`--`，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到`git checkout`命令。  ","tokens":[{"type":"codespan","raw":"`git checkout -- file`","text":"git checkout -- file"},{"type":"text","raw":"命令中的","text":"命令中的"},{"type":"codespan","raw":"`--`","text":"--"},{"type":"text","raw":"很重要，没有","text":"很重要，没有"},{"type":"codespan","raw":"`--`","text":"--"},{"type":"text","raw":"，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到","text":"，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到"},{"type":"codespan","raw":"`git checkout`","text":"git checkout"},{"type":"text","raw":"命令。  ","text":"命令。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"如果已经`git add`到暂存区了，需要先执行`git reset --hard HEAD file`将文件修改撤销掉（unstage）之后在执行 `git checkout -- file`  ","text":"如果已经`git add`到暂存区了，需要先执行`git reset --hard HEAD file`将文件修改撤销掉（unstage）之后在执行 `git checkout -- file`  ","tokens":[{"type":"text","raw":"如果已经","text":"如果已经"},{"type":"codespan","raw":"`git add`","text":"git add"},{"type":"text","raw":"到暂存区了，需要先执行","text":"到暂存区了，需要先执行"},{"type":"codespan","raw":"`git reset --hard HEAD file`","text":"git reset --hard HEAD file"},{"type":"text","raw":"将文件修改撤销掉（unstage）之后在执行 ","text":"将文件修改撤销掉（unstage）之后在执行 "},{"type":"codespan","raw":"`git checkout -- file`","text":"git checkout -- file"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n  \n"},{"type":"paragraph","raw":"撤销操作汇总：  ","text":"撤销操作汇总：  ","tokens":[{"type":"text","raw":"撤销操作汇总：  ","text":"撤销操作汇总：  "}]},{"type":"space","raw":"\n  \n"},{"type":"list","raw":"- 情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  \n- 情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  \n- 情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- 情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  \n","task":false,"loose":false,"text":"情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  ","tokens":[{"type":"text","raw":"情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  ","text":"情况1：**文件只在工作区操作，未add**。撤销操作：`git restore <file>`。结果：工作区文件回退*。  ","tokens":[{"type":"text","raw":"情况1：","text":"情况1："},{"type":"strong","raw":"**文件只在工作区操作，未add**","text":"文件只在工作区操作，未add","tokens":[{"type":"text","raw":"文件只在工作区操作，未add","text":"文件只在工作区操作，未add"}]},{"type":"text","raw":"。撤销操作：","text":"。撤销操作："},{"type":"codespan","raw":"`git restore <file>`","text":"git restore &lt;file&gt;"},{"type":"text","raw":"。结果：工作区文件回退*。  ","text":"。结果：工作区文件回退*。  "}]}]},{"type":"list_item","raw":"- 情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  \n","task":false,"loose":false,"text":"情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  ","tokens":[{"type":"text","raw":"情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  ","text":"情况2：**文件已add，未commit**。撤销操作：`git restore --staged <file>`。结果：**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**  ","tokens":[{"type":"text","raw":"情况2：","text":"情况2："},{"type":"strong","raw":"**文件已add，未commit**","text":"文件已add，未commit","tokens":[{"type":"text","raw":"文件已add，未commit","text":"文件已add，未commit"}]},{"type":"text","raw":"。撤销操作：","text":"。撤销操作："},{"type":"codespan","raw":"`git restore --staged <file>`","text":"git restore --staged &lt;file&gt;"},{"type":"text","raw":"。结果：","text":"。结果："},{"type":"strong","raw":"**暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。**","text":"暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。","tokens":[{"type":"text","raw":"暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。","text":"暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。"}]},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","task":false,"loose":false,"text":"情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","tokens":[{"type":"text","raw":"情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","text":"情况3：**文件已add，已commit**。撤销操作：**git reset --hard commit_id**。结果：**工作区文件、暂存区文件、本地仓库都回退**","tokens":[{"type":"text","raw":"情况3：","text":"情况3："},{"type":"strong","raw":"**文件已add，已commit**","text":"文件已add，已commit","tokens":[{"type":"text","raw":"文件已add，已commit","text":"文件已add，已commit"}]},{"type":"text","raw":"。撤销操作：","text":"。撤销操作："},{"type":"strong","raw":"**git reset --hard commit_id**","text":"git reset --hard commit_id","tokens":[{"type":"text","raw":"git reset --hard commit_id","text":"git reset --hard commit_id"}]},{"type":"text","raw":"。结果：","text":"。结果："},{"type":"strong","raw":"**工作区文件、暂存区文件、本地仓库都回退**","text":"工作区文件、暂存区文件、本地仓库都回退","tokens":[{"type":"text","raw":"工作区文件、暂存区文件、本地仓库都回退","text":"工作区文件、暂存区文件、本地仓库都回退"}]}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"heading","raw":"### 远程仓库配置  \n","depth":3,"text":"远程仓库配置","tokens":[{"type":"text","raw":"远程仓库配置","text":"远程仓库配置"}]},{"type":"heading","raw":"#### 生成公钥私钥  \n","depth":4,"text":"生成公钥私钥","tokens":[{"type":"text","raw":"生成公钥私钥","text":"生成公钥私钥"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \nssh-keygen -t rsa -C \"youremail@example.com\"  \n```  \n","lang":"Bash","text":"ssh-keygen -t rsa -C \"youremail@example.com\"  "},{"type":"paragraph","raw":"用户目录下的`.ssh`目录，里面有`id_rsa`和`id_rsa.pub`两个文件，这两个就是SSH Key的秘钥对，`id_rsa`是私钥，不能泄露出去，`id_rsa.pub`是公钥，可以放心地告诉任何人。  ","text":"用户目录下的`.ssh`目录，里面有`id_rsa`和`id_rsa.pub`两个文件，这两个就是SSH Key的秘钥对，`id_rsa`是私钥，不能泄露出去，`id_rsa.pub`是公钥，可以放心地告诉任何人。  ","tokens":[{"type":"text","raw":"用户目录下的","text":"用户目录下的"},{"type":"codespan","raw":"`.ssh`","text":".ssh"},{"type":"text","raw":"目录，里面有","text":"目录，里面有"},{"type":"codespan","raw":"`id_rsa`","text":"id_rsa"},{"type":"text","raw":"和","text":"和"},{"type":"codespan","raw":"`id_rsa.pub`","text":"id_rsa.pub"},{"type":"text","raw":"两个文件，这两个就是SSH Key的秘钥对，","text":"两个文件，这两个就是SSH Key的秘钥对，"},{"type":"codespan","raw":"`id_rsa`","text":"id_rsa"},{"type":"text","raw":"是私钥，不能泄露出去，","text":"是私钥，不能泄露出去，"},{"type":"codespan","raw":"`id_rsa.pub`","text":"id_rsa.pub"},{"type":"text","raw":"是公钥，可以放心地告诉任何人。  ","text":"是公钥，可以放心地告诉任何人。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  ","text":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  ","tokens":[{"type":"text","raw":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  ","text":"登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"将本地仓库关联远程仓库  ","text":"将本地仓库关联远程仓库  ","tokens":[{"type":"text","raw":"将本地仓库关联远程仓库  ","text":"将本地仓库关联远程仓库  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` shell  \ngit remote add origin git@github.com:192114/git-practice.git  \n```  ","lang":"shell","text":"git remote add origin git@github.com:192114/git-practice.git  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。  ","text":"添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。  ","tokens":[{"type":"text","raw":"添加后，远程库的名字就是","text":"添加后，远程库的名字就是"},{"type":"codespan","raw":"`origin`","text":"origin"},{"type":"text","raw":"，这是Git默认的叫法，也可以改成别的，但是","text":"，这是Git默认的叫法，也可以改成别的，但是"},{"type":"codespan","raw":"`origin`","text":"origin"},{"type":"text","raw":"这个名字一看就知道是远程库。  ","text":"这个名字一看就知道是远程库。  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit push -u origin master  \nCounting objects: 20, done.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (15/15), done.  \nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.  \nTotal 20 (delta 5), reused 0 (delta 0)  \nremote: Resolving deltas: 100% (5/5), done.  \nTo github.com:michaelliao/learngit.git  \n * [new branch]      master -> master  \nBranch 'master' set up to track remote branch 'master' from 'origin'.  \n```  ","lang":"Bash","text":"git push -u origin master  \nCounting objects: 20, done.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (15/15), done.  \nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.  \nTotal 20 (delta 5), reused 0 (delta 0)  \nremote: Resolving deltas: 100% (5/5), done.  \nTo github.com:michaelliao/learngit.git  \n * [new branch]      master -> master  \nBranch 'master' set up to track remote branch 'master' from 'origin'.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。  ","text":"由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。  ","tokens":[{"type":"text","raw":"由于远程库是空的，我们第一次推送","text":"由于远程库是空的，我们第一次推送"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支时，加上了","text":"分支时，加上了"},{"type":"codespan","raw":"`-u`","text":"-u"},{"type":"text","raw":"参数，Git不但会把本地的","text":"参数，Git不但会把本地的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支内容推送的远程新的","text":"分支内容推送的远程新的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支，还会把本地的","text":"分支，还会把本地的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支和远程的","text":"分支和远程的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支关联起来，在以后的推送或者拉取时就可以简化命令。  ","text":"分支关联起来，在以后的推送或者拉取时就可以简化命令。  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"#### 删除远程库  \n","depth":4,"text":"删除远程库","tokens":[{"type":"text","raw":"删除远程库","text":"删除远程库"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \ngit remote -v  \norigin  git@github.com:192114/git-practice.git (fetch)  \norigin  git@github.com:192114/git-practice.git (push)  \n```  ","lang":"Bash","text":"git remote -v  \norigin  git@github.com:192114/git-practice.git (fetch)  \norigin  git@github.com:192114/git-practice.git (push)  "},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit remote rm origin  \n```  ","lang":"Bash","text":"git remote rm origin  "},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"#### 从远端克隆  \n","depth":4,"text":"从远端克隆","tokens":[{"type":"text","raw":"从远端克隆","text":"从远端克隆"}]},{"type":"space","raw":"  \n"},{"type":"code","raw":"``` Bash  \ngit clone git@github.com:192114/gitskills.git  \nCloning into 'gitskills'...  \nremote: Counting objects: 3, done.  \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3  \nReceiving objects: 100% (3/3), done.  \n```  \n","lang":"Bash","text":"git clone git@github.com:192114/gitskills.git  \nCloning into 'gitskills'...  \nremote: Counting objects: 3, done.  \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3  \nReceiving objects: 100% (3/3), done.  "}],"tags":["git"],"date":"2023-12-25","series":"其他","title":"Git的基本用法","slug":"git-usage","keywords":"git基本用法","description":"git用法，git 基础用法","lastmod":"","share":"true"}