{"html":"<hr>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">廖雪峰老师的git教程</a>  </p>\n<ul>\n<li><code>git init</code> 初始化仓库  </li>\n<li><code>git add [file1 file2] / .</code> 添加到暂存区  </li>\n<li><code>git commit -m [message]</code> 将当前staged修改提交<code>--amend</code>就会生成一条新的commit替换了原commit  </li>\n<li><code>git status</code> 查看状态</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git status  \nOn branch master  \nChanges not staged <span class=\"hljs-keyword\">for</span> commit:  \n  (use <span class=\"hljs-string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)  \n  (use <span class=\"hljs-string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"hljs-keyword\">in</span> working directory)  \n  \n    modified:   readme.txt  \n  \nUntracked files:  \n  (use <span class=\"hljs-string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"hljs-keyword\">in</span> what will be committed)  \n  \n    LICENSE  \n  \nno changes added to commit (use <span class=\"hljs-string\">\"git add\"</span> and/or <span class=\"hljs-string\">\"git commit -a\"</span>)  \n</code></pre><ul>\n<li><code>git log</code> 查看历史记录 <code>--pretty=oneline</code> 加上他一行展示信息</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git <span class=\"hljs-built_in\">log</span>  \ncommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)  \nAuthor: Michael Liao &lt;askxuefeng@gmail.com&gt;  \nDate:   Fri May 18 21:03:36 2018 +0800  \n  \n    add distributed  \n  \ncommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0  \nAuthor: Michael Liao &lt;askxuefeng@gmail.com&gt;  \nDate:   Fri May 18 20:59:18 2018 +0800  \n  \n    wrote a readme file  \n</code></pre><ul>\n<li><code>git reflog</code> 记录你的每一次命令</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git reflog  \n  \ne475afc HEAD@{1}: reset: moving to HEAD^  \n1094adb (HEAD -&gt; master) HEAD@{2}: commit: append GPL  \ne475afc HEAD@{3}: commit: add distributed  \neaadf4e HEAD@{4}: commit (initial): wrote a readme file  \n</code></pre><ul>\n<li><code>git diff</code> 比对改动</li>\n</ul>\n<pre><code class=\"hljs language-Bash\">git diff readme.txt   \ndiff --git a/readme.txt b/readme.txt  \nindex 46d49bf..9247db6 100644  \n--- a/readme.txt  \n+++ b/readme.txt  \n@@ -1,2 +1,2 @@  \n-Git is a version control system.  \n+Git is a distributed version control system.  \n Git is free software.  \n</code></pre><h3 id=\"anchor-回退版本\">回退版本</h3>\n<p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。  </p>\n<ul>\n<li><code>git reset --hard HEAD^</code> 回退到上一个版本   </li>\n<li><code>git reset --hard commitId</code> 回退到指定commit，说重置应该更为准确</li>\n</ul>\n<h3 id=\"anchor-撤销修改\">撤销修改</h3>\n<pre><code class=\"hljs language-Bash\">git checkout -- readme.txt  \n</code></pre><p>命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：  </p>\n<ul>\n<li><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；  </p>\n</li>\n<li><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n</li>\n</ul>\n<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。  </p>\n<p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。  </p>\n<p>如果已经<code>git add</code>到暂存区了，需要先执行<code>git reset --hard HEAD file</code>将文件修改撤销掉（unstage）之后在执行 <code>git checkout -- file</code>  </p>\n<p>撤销操作汇总：  </p>\n<ul>\n<li>情况1：<strong>文件只在工作区操作，未add</strong>。撤销操作：<code>git restore &lt;file&gt;</code>。结果：工作区文件回退*。  </li>\n<li>情况2：<strong>文件已add，未commit</strong>。撤销操作：<code>git restore --staged &lt;file&gt;</code>。结果：<strong>暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。</strong>  </li>\n<li>情况3：<strong>文件已add，已commit</strong>。撤销操作：<strong>git reset --hard commit_id</strong>。结果：<strong>工作区文件、暂存区文件、本地仓库都回退</strong></li>\n</ul>\n<h3 id=\"anchor-远程仓库配置\">远程仓库配置</h3>\n<h4 id=\"anchor-生成公钥私钥\">生成公钥私钥</h4>\n<pre><code class=\"hljs language-Bash\">ssh-keygen -t rsa -C <span class=\"hljs-string\">\"youremail@example.com\"</span>  \n</code></pre><p>用户目录下的<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。  </p>\n<p>登录github，“Account settings”，“SSH Keys”页面将公钥配置到gitbub中  </p>\n<p>将本地仓库关联远程仓库  </p>\n<pre><code class=\"hljs language-shell\">git remote add origin git@github.com:192114/git-practice.git  \n</code></pre><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。  </p>\n<pre><code class=\"hljs language-Bash\">git push -u origin master  \nCounting objects: 20, <span class=\"hljs-keyword\">done</span>.  \nDelta compression using up to 4 threads.  \nCompressing objects: 100% (15/15), <span class=\"hljs-keyword\">done</span>.  \nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, <span class=\"hljs-keyword\">done</span>.  \nTotal 20 (delta 5), reused 0 (delta 0)  \nremote: Resolving deltas: 100% (5/5), <span class=\"hljs-keyword\">done</span>.  \nTo github.com:michaelliao/learngit.git  \n * [new branch]      master -&gt; master  \nBranch <span class=\"hljs-string\">'master'</span> <span class=\"hljs-built_in\">set</span> up to track remote branch <span class=\"hljs-string\">'master'</span> from <span class=\"hljs-string\">'origin'</span>.  \n</code></pre><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。  </p>\n<h4 id=\"anchor-删除远程库\">删除远程库</h4>\n<pre><code class=\"hljs language-Bash\">git remote -v  \norigin  git@github.com:192114/git-practice.git (fetch)  \norigin  git@github.com:192114/git-practice.git (push)  \n</code></pre><pre><code class=\"hljs language-Bash\">git remote <span class=\"hljs-built_in\">rm</span> origin  \n</code></pre><h4 id=\"anchor-从远端克隆\">从远端克隆</h4>\n<pre><code class=\"hljs language-Bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:192114/gitskills.git  \nCloning into <span class=\"hljs-string\">'gitskills'</span>...  \nremote: Counting objects: 3, <span class=\"hljs-keyword\">done</span>.  \nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3  \nReceiving objects: 100% (3/3), <span class=\"hljs-keyword\">done</span>.  \n</code></pre>","heading":[{"text":"回退版本","level":3,"id":"anchor-回退版本"},{"text":"撤销修改","level":3,"id":"anchor-撤销修改"},{"text":"远程仓库配置","level":3,"id":"anchor-远程仓库配置"},{"text":"生成公钥私钥","level":4,"id":"anchor-生成公钥私钥"},{"text":"删除远程库","level":4,"id":"anchor-删除远程库"},{"text":"从远端克隆","level":4,"id":"anchor-从远端克隆"}],"tags":["git"],"date":"2023-12-25","series":"其他","title":"Git的基本用法","slug":"git-usage","keywords":"git基本用法","description":"git用法，git 基础用法","lastmod":"","share":"true"}