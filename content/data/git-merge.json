{"html":"<hr>\n<p>准备新的<code>feature1</code>分支，继续我们的新分支开发：  </p>\n<pre><code class=\"hljs language-Bash\">git switch -c feature1  \nSwitched to a new branch <span class=\"hljs-string\">'feature1'</span>  \n</code></pre><p>修改<code>readme.txt</code>最后一行，改为：  </p>\n<pre><code class=\"hljs language-Bash\">Creating a new branch is quick AND simple.  \n</code></pre><p>在<code>feature1</code>分支上提交：  </p>\n<pre><code class=\"hljs language-Bash\">git add readme.txt  \n  \ngit commit -m <span class=\"hljs-string\">\"AND simple\"</span>  \n[feature1 14096d0] AND simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n</code></pre><p>切换到<code>master</code>分支：  </p>\n<pre><code class=\"hljs language-Bash\">git switch master  \nSwitched to branch <span class=\"hljs-string\">'master'</span>  \nYour branch is ahead of <span class=\"hljs-string\">'origin/master'</span> by 1 commit.  \n  (use <span class=\"hljs-string\">\"git push\"</span> to publish your <span class=\"hljs-built_in\">local</span> commits)  \n</code></pre><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。  </p>\n<p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：  </p>\n<pre><code class=\"hljs language-Bash\">Creating a new branch is quick &amp; simple.  \n</code></pre><p>提交：  </p>\n<pre><code class=\"hljs language-Bash\">git add readme.txt   \ngit commit -m <span class=\"hljs-string\">\"&amp; simple\"</span>  \n[master 5dc6824] &amp; simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                            HEAD  </span>\n<span class=\"hljs-code\">                              │  </span>\n<span class=\"hljs-code\">                              │  </span>\n<span class=\"hljs-code\">                              ▼  </span>\n<span class=\"hljs-code\">                           master  </span>\n<span class=\"hljs-code\">                              │  </span>\n<span class=\"hljs-code\">                              │  </span>\n<span class=\"hljs-code\">                              ▼  </span>\n<span class=\"hljs-code\">                            ┌───┐  </span>\n<span class=\"hljs-code\">                         ┌─▶│   │  </span>\n┌───┐    ┌───┐    ┌───┐  │  └───┘  \n│   │───▶│   │───▶│   │──┤  \n└───┘    └───┘    └───┘  │  ┌───┐  \n<span class=\"hljs-code\">                         └─▶│   │  </span>\n<span class=\"hljs-code\">                            └───┘  </span>\n<span class=\"hljs-code\">                              ▲  </span>\n<span class=\"hljs-code\">                              │  </span>\n<span class=\"hljs-code\">                              │  </span>\n<span class=\"hljs-code\">                          feature1  </span>\n</code></pre><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  </p>\n<pre><code class=\"hljs language-Bash\">git merge feature1  \nAuto-merging readme.txt  \nCONFLICT (content): Merge conflict <span class=\"hljs-keyword\">in</span> readme.txt  \nAutomatic merge failed; fix conflicts and <span class=\"hljs-keyword\">then</span> commit the result.  \n</code></pre><p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：  </p>\n<pre><code class=\"hljs language-Bash\">git status  \nOn branch master  \nYour branch is ahead of <span class=\"hljs-string\">'origin/master'</span> by 2 commits.  \n  (use <span class=\"hljs-string\">\"git push\"</span> to publish your <span class=\"hljs-built_in\">local</span> commits)  \n  \nYou have unmerged paths.  \n  (fix conflicts and run <span class=\"hljs-string\">\"git commit\"</span>)  \n  (use <span class=\"hljs-string\">\"git merge --abort\"</span> to abort the merge)  \n  \nUnmerged paths:  \n  (use <span class=\"hljs-string\">\"git add &lt;file&gt;...\"</span> to mark resolution)  \n  \n    both modified:   readme.txt  \n  \nno changes added to commit (use <span class=\"hljs-string\">\"git add\"</span> and/or <span class=\"hljs-string\">\"git commit -a\"</span>)  \n</code></pre><p>我们可以直接查看readme.txt的内容：  </p>\n<pre><code class=\"hljs language-Bash\">Git is a distributed version control system.  \nGit is free software distributed under the GPL.  \nGit has a mutable index called stage.  \nGit tracks changes of files.  \n&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class=\"hljs-string\">HEAD  \nCreating a new branch is quick &amp; simple.  \n=======  \nCreating a new branch is quick AND simple.  \n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1  </span>\n</code></pre><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：  </p>\n<pre><code class=\"hljs language-Bash\">Creating a new branch is quick and simple.  \n</code></pre><p>再提交：  </p>\n<pre><code class=\"hljs language-Bash\">git add readme.txt   \ngit commit -m <span class=\"hljs-string\">\"conflict fixed\"</span>  \n[master cf810e4] conflict fixed  \n</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：  </p>\n<pre><code class=\"hljs language-ascii\">                                     HEAD  \n                                       │  \n                                       │  \n                                       ▼  \n                                    master  \n                                       │  \n                                       │  \n                                       ▼  \n                            ┌───┐    ┌───┐  \n                         ┌─▶│   │───▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘    └───┘  \n│   │───▶│   │───▶│   │──┤             ▲  \n└───┘    └───┘    └───┘  │  ┌───┐      │  \n                         └─▶│   │──────┘  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  \n</code></pre><p>用带参数的<code>git log</code>也可以看到分支的合并情况：  </p>\n<pre><code class=\"hljs language-Bash\">git <span class=\"hljs-built_in\">log</span> --graph --pretty=oneline --abbrev-commit  \n*   cf810e4 (HEAD -&gt; master) conflict fixed  \n|\\    \n| * 14096d0 (feature1) AND simple  \n* | 5dc6824 &amp; simple  \n|/    \n* b17d20e branch <span class=\"hljs-built_in\">test</span>  \n* d46f35e (origin/master) remove test.txt  \n* b84166e add test.txt  \n* 519219b git tracks changes  \n* e43a48b understand how stage works  \n* 1094adb append GPL  \n* e475afc add distributed  \n* eaadf4e wrote a readme file  \n</code></pre><p>最后，删除<code>feature1</code>分支：  </p>\n<pre><code class=\"hljs language-Bash\">git branch -d feature1  \nDeleted branch feature1 (was 14096d0).  \n</code></pre><p>用<code>git log --graph</code>命令可以看到分支合并图。  </p>\n<p><code>git merge --abort</code> 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.</p>\n","heading":[],"tokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"准备新的`feature1`分支，继续我们的新分支开发：  ","text":"准备新的`feature1`分支，继续我们的新分支开发：  ","tokens":[{"type":"text","raw":"准备新的","text":"准备新的"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支，继续我们的新分支开发：  ","text":"分支，继续我们的新分支开发：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch -c feature1  \nSwitched to a new branch 'feature1'  \n```  ","lang":"Bash","text":"git switch -c feature1  \nSwitched to a new branch 'feature1'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"修改`readme.txt`最后一行，改为：  ","text":"修改`readme.txt`最后一行，改为：  ","tokens":[{"type":"text","raw":"修改","text":"修改"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"最后一行，改为：  ","text":"最后一行，改为：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick AND simple.  \n```  ","lang":"Bash","text":"Creating a new branch is quick AND simple.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"在`feature1`分支上提交：  ","text":"在`feature1`分支上提交：  ","tokens":[{"type":"text","raw":"在","text":"在"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支上提交：  ","text":"分支上提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt  \n  \ngit commit -m \"AND simple\"  \n[feature1 14096d0] AND simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n```  ","lang":"Bash","text":"git add readme.txt  \n  \ngit commit -m \"AND simple\"  \n[feature1 14096d0] AND simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"切换到`master`分支：  ","text":"切换到`master`分支：  ","tokens":[{"type":"text","raw":"切换到","text":"切换到"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch master  \nSwitched to branch 'master'  \nYour branch is ahead of 'origin/master' by 1 commit.  \n  (use \"git push\" to publish your local commits)  \n```  ","lang":"Bash","text":"git switch master  \nSwitched to branch 'master'  \nYour branch is ahead of 'origin/master' by 1 commit.  \n  (use \"git push\" to publish your local commits)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"Git还会自动提示我们当前`master`分支比远程的`master`分支要超前1个提交。  ","text":"Git还会自动提示我们当前`master`分支比远程的`master`分支要超前1个提交。  ","tokens":[{"type":"text","raw":"Git还会自动提示我们当前","text":"Git还会自动提示我们当前"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支比远程的","text":"分支比远程的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支要超前1个提交。  ","text":"分支要超前1个提交。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"在`master`分支上把`readme.txt`文件的最后一行改为：  ","text":"在`master`分支上把`readme.txt`文件的最后一行改为：  ","tokens":[{"type":"text","raw":"在","text":"在"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支上把","text":"分支上把"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"文件的最后一行改为：  ","text":"文件的最后一行改为：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick & simple.  \n```  ","lang":"Bash","text":"Creating a new branch is quick & simple.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"提交：  ","text":"提交：  ","tokens":[{"type":"text","raw":"提交：  ","text":"提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt   \ngit commit -m \"& simple\"  \n[master 5dc6824] & simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n```  ","lang":"Bash","text":"git add readme.txt   \ngit commit -m \"& simple\"  \n[master 5dc6824] & simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，`master`分支和`feature1`分支各自都分别有新的提交，变成了这样：  ","text":"现在，`master`分支和`feature1`分支各自都分别有新的提交，变成了这样：  ","tokens":[{"type":"text","raw":"现在，","text":"现在，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支和","text":"分支和"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支各自都分别有新的提交，变成了这样：  ","text":"分支各自都分别有新的提交，变成了这样：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                            HEAD  \n                              │  \n                              │  \n                              ▼  \n                           master  \n                              │  \n                              │  \n                              ▼  \n                            ┌───┐  \n                         ┌─▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘  \n│   │───▶│   │───▶│   │──┤  \n└───┘    └───┘    └───┘  │  ┌───┐  \n                         └─▶│   │  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  \n```  ","lang":"asciidoc","text":"                            HEAD  \n                              │  \n                              │  \n                              ▼  \n                           master  \n                              │  \n                              │  \n                              ▼  \n                            ┌───┐  \n                         ┌─▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘  \n│   │───▶│   │───▶│   │──┤  \n└───┘    └───┘    └───┘  │  ┌───┐  \n                         └─▶│   │  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  ","text":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  ","tokens":[{"type":"text","raw":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  ","text":"这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit merge feature1  \nAuto-merging readme.txt  \nCONFLICT (content): Merge conflict in readme.txt  \nAutomatic merge failed; fix conflicts and then commit the result.  \n```  ","lang":"Bash","text":"git merge feature1  \nAuto-merging readme.txt  \nCONFLICT (content): Merge conflict in readme.txt  \nAutomatic merge failed; fix conflicts and then commit the result.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"果然冲突了！Git告诉我们，`readme.txt`文件存在冲突，必须手动解决冲突后再提交。`git status`也可以告诉我们冲突的文件：  ","text":"果然冲突了！Git告诉我们，`readme.txt`文件存在冲突，必须手动解决冲突后再提交。`git status`也可以告诉我们冲突的文件：  ","tokens":[{"type":"text","raw":"果然冲突了！Git告诉我们，","text":"果然冲突了！Git告诉我们，"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"文件存在冲突，必须手动解决冲突后再提交。","text":"文件存在冲突，必须手动解决冲突后再提交。"},{"type":"codespan","raw":"`git status`","text":"git status"},{"type":"text","raw":"也可以告诉我们冲突的文件：  ","text":"也可以告诉我们冲突的文件：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit status  \nOn branch master  \nYour branch is ahead of 'origin/master' by 2 commits.  \n  (use \"git push\" to publish your local commits)  \n  \nYou have unmerged paths.  \n  (fix conflicts and run \"git commit\")  \n  (use \"git merge --abort\" to abort the merge)  \n  \nUnmerged paths:  \n  (use \"git add <file>...\" to mark resolution)  \n  \n    both modified:   readme.txt  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  \n```  ","lang":"Bash","text":"git status  \nOn branch master  \nYour branch is ahead of 'origin/master' by 2 commits.  \n  (use \"git push\" to publish your local commits)  \n  \nYou have unmerged paths.  \n  (fix conflicts and run \"git commit\")  \n  (use \"git merge --abort\" to abort the merge)  \n  \nUnmerged paths:  \n  (use \"git add <file>...\" to mark resolution)  \n  \n    both modified:   readme.txt  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"我们可以直接查看readme.txt的内容：  ","text":"我们可以直接查看readme.txt的内容：  ","tokens":[{"type":"text","raw":"我们可以直接查看readme.txt的内容：  ","text":"我们可以直接查看readme.txt的内容：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nGit is a distributed version control system.  \nGit is free software distributed under the GPL.  \nGit has a mutable index called stage.  \nGit tracks changes of files.  \n<<<<<<< HEAD  \nCreating a new branch is quick & simple.  \n=======  \nCreating a new branch is quick AND simple.  \n>>>>>>> feature1  \n```  ","lang":"Bash","text":"Git is a distributed version control system.  \nGit is free software distributed under the GPL.  \nGit has a mutable index called stage.  \nGit tracks changes of files.  \n<<<<<<< HEAD  \nCreating a new branch is quick & simple.  \n=======  \nCreating a new branch is quick AND simple.  \n>>>>>>> feature1  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"Git用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的内容，我们修改如下后保存：  ","text":"Git用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的内容，我们修改如下后保存：  ","tokens":[{"type":"text","raw":"Git用","text":"Git用"},{"type":"codespan","raw":"`<<<<<<<`","text":"&lt;&lt;&lt;&lt;&lt;&lt;&lt;"},{"type":"text","raw":"，","text":"，"},{"type":"codespan","raw":"`=======`","text":"======="},{"type":"text","raw":"，","text":"，"},{"type":"codespan","raw":"`>>>>>>>`","text":"&gt;&gt;&gt;&gt;&gt;&gt;&gt;"},{"type":"text","raw":"标记出不同分支的内容，我们修改如下后保存：  ","text":"标记出不同分支的内容，我们修改如下后保存：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick and simple.  \n```  ","lang":"Bash","text":"Creating a new branch is quick and simple.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"再提交：  ","text":"再提交：  ","tokens":[{"type":"text","raw":"再提交：  ","text":"再提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt   \ngit commit -m \"conflict fixed\"  \n[master cf810e4] conflict fixed  \n```  ","lang":"Bash","text":"git add readme.txt   \ngit commit -m \"conflict fixed\"  \n[master cf810e4] conflict fixed  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，`master`分支和`feature1`分支变成了下图所示：  ","text":"现在，`master`分支和`feature1`分支变成了下图所示：  ","tokens":[{"type":"text","raw":"现在，","text":"现在，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支和","text":"分支和"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支变成了下图所示：  ","text":"分支变成了下图所示：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"```ascii  \n                                     HEAD  \n                                       │  \n                                       │  \n                                       ▼  \n                                    master  \n                                       │  \n                                       │  \n                                       ▼  \n                            ┌───┐    ┌───┐  \n                         ┌─▶│   │───▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘    └───┘  \n│   │───▶│   │───▶│   │──┤             ▲  \n└───┘    └───┘    └───┘  │  ┌───┐      │  \n                         └─▶│   │──────┘  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  \n```  ","lang":"ascii","text":"                                     HEAD  \n                                       │  \n                                       │  \n                                       ▼  \n                                    master  \n                                       │  \n                                       │  \n                                       ▼  \n                            ┌───┐    ┌───┐  \n                         ┌─▶│   │───▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘    └───┘  \n│   │───▶│   │───▶│   │──┤             ▲  \n└───┘    └───┘    └───┘  │  ┌───┐      │  \n                         └─▶│   │──────┘  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"用带参数的`git log`也可以看到分支的合并情况：  ","text":"用带参数的`git log`也可以看到分支的合并情况：  ","tokens":[{"type":"text","raw":"用带参数的","text":"用带参数的"},{"type":"codespan","raw":"`git log`","text":"git log"},{"type":"text","raw":"也可以看到分支的合并情况：  ","text":"也可以看到分支的合并情况：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit log --graph --pretty=oneline --abbrev-commit  \n*   cf810e4 (HEAD -> master) conflict fixed  \n|\\    \n| * 14096d0 (feature1) AND simple  \n* | 5dc6824 & simple  \n|/    \n* b17d20e branch test  \n* d46f35e (origin/master) remove test.txt  \n* b84166e add test.txt  \n* 519219b git tracks changes  \n* e43a48b understand how stage works  \n* 1094adb append GPL  \n* e475afc add distributed  \n* eaadf4e wrote a readme file  \n```  ","lang":"Bash","text":"git log --graph --pretty=oneline --abbrev-commit  \n*   cf810e4 (HEAD -> master) conflict fixed  \n|\\    \n| * 14096d0 (feature1) AND simple  \n* | 5dc6824 & simple  \n|/    \n* b17d20e branch test  \n* d46f35e (origin/master) remove test.txt  \n* b84166e add test.txt  \n* 519219b git tracks changes  \n* e43a48b understand how stage works  \n* 1094adb append GPL  \n* e475afc add distributed  \n* eaadf4e wrote a readme file  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"最后，删除`feature1`分支：  ","text":"最后，删除`feature1`分支：  ","tokens":[{"type":"text","raw":"最后，删除","text":"最后，删除"},{"type":"codespan","raw":"`feature1`","text":"feature1"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch -d feature1  \nDeleted branch feature1 (was 14096d0).  \n```  ","lang":"Bash","text":"git branch -d feature1  \nDeleted branch feature1 (was 14096d0).  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"用`git log --graph`命令可以看到分支合并图。  ","text":"用`git log --graph`命令可以看到分支合并图。  ","tokens":[{"type":"text","raw":"用","text":"用"},{"type":"codespan","raw":"`git log --graph`","text":"git log --graph"},{"type":"text","raw":"命令可以看到分支合并图。  ","text":"命令可以看到分支合并图。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git merge --abort` 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.","text":"`git merge --abort` 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.","tokens":[{"type":"codespan","raw":"`git merge --abort`","text":"git merge --abort"},{"type":"text","raw":" 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.","text":" 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动."}]}],"tags":["git"],"date":"2024-01-11","series":"其他","title":"Git冲突合并","slug":"git-merge","keywords":"git冲突合并","description":"git用法，git merge","lastmod":"","share":"true"}