{"html":"<hr>\n<p>准备新的<code>feature1</code>分支，继续我们的新分支开发：  </p>\n<pre><code>$ git switch -c feature1  \nSwitched to a new branch 'feature1'  \n</code></pre><p>修改<code>readme.txt</code>最后一行，改为：  </p>\n<pre><code>Creating a new branch is quick AND simple.  \n</code></pre><p>在<code>feature1</code>分支上提交：  </p>\n<pre><code>$ git add readme.txt  \n  \n$ git commit -m \"AND simple\"  \n[feature1 14096d0] AND simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n</code></pre><p>切换到<code>master</code>分支：  </p>\n<pre><code>$ git switch master  \nSwitched to branch 'master'  \nYour branch is ahead of 'origin/master' by 1 commit.  \n  (use \"git push\" to publish your local commits)  \n</code></pre><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。  </p>\n<p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：  </p>\n<pre><code>Creating a new branch is quick &amp; simple.  \n</code></pre><p>提交：  </p>\n<pre><code>$ git add readme.txt   \n$ git commit -m \"&amp; simple\"  \n[master 5dc6824] &amp; simple  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：  </p>\n<pre><code class=\"hljs language-ascii\">                            HEAD  \n                              │  \n                              │  \n                              ▼  \n                           master  \n                              │  \n                              │  \n                              ▼  \n                            ┌───┐  \n                         ┌─▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘  \n│   │───▶│   │───▶│   │──┤  \n└───┘    └───┘    └───┘  │  ┌───┐  \n                         └─▶│   │  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  \n</code></pre><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：  </p>\n<pre><code>$ git merge feature1  \nAuto-merging readme.txt  \nCONFLICT (content): Merge conflict in readme.txt  \nAutomatic merge failed; fix conflicts and then commit the result.  \n</code></pre><p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：  </p>\n<pre><code>$ git status  \nOn branch master  \nYour branch is ahead of 'origin/master' by 2 commits.  \n  (use \"git push\" to publish your local commits)  \n  \nYou have unmerged paths.  \n  (fix conflicts and run \"git commit\")  \n  (use \"git merge --abort\" to abort the merge)  \n  \nUnmerged paths:  \n  (use \"git add &lt;file&gt;...\" to mark resolution)  \n  \n    both modified:   readme.txt  \n  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  \n</code></pre><p>我们可以直接查看readme.txt的内容：  </p>\n<pre><code>Git is a distributed version control system.  \nGit is free software distributed under the GPL.  \nGit has a mutable index called stage.  \nGit tracks changes of files.  \n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  \nCreating a new branch is quick &amp; simple.  \n=======  \nCreating a new branch is quick AND simple.  \n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1  \n</code></pre><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：  </p>\n<pre><code>Creating a new branch is quick and simple.  \n</code></pre><p>再提交：  </p>\n<pre><code>$ git add readme.txt   \n$ git commit -m \"conflict fixed\"  \n[master cf810e4] conflict fixed  \n</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：  </p>\n<pre><code class=\"hljs language-ascii\">                                     HEAD  \n                                       │  \n                                       │  \n                                       ▼  \n                                    master  \n                                       │  \n                                       │  \n                                       ▼  \n                            ┌───┐    ┌───┐  \n                         ┌─▶│   │───▶│   │  \n┌───┐    ┌───┐    ┌───┐  │  └───┘    └───┘  \n│   │───▶│   │───▶│   │──┤             ▲  \n└───┘    └───┘    └───┘  │  ┌───┐      │  \n                         └─▶│   │──────┘  \n                            └───┘  \n                              ▲  \n                              │  \n                              │  \n                          feature1  \n</code></pre><p>用带参数的<code>git log</code>也可以看到分支的合并情况：  </p>\n<pre><code>$ git log --graph --pretty=oneline --abbrev-commit  \n*   cf810e4 (HEAD -&gt; master) conflict fixed  \n|\\    \n| * 14096d0 (feature1) AND simple  \n* | 5dc6824 &amp; simple  \n|/    \n* b17d20e branch test  \n* d46f35e (origin/master) remove test.txt  \n* b84166e add test.txt  \n* 519219b git tracks changes  \n* e43a48b understand how stage works  \n* 1094adb append GPL  \n* e475afc add distributed  \n* eaadf4e wrote a readme file  \n</code></pre><p>最后，删除<code>feature1</code>分支：  </p>\n<pre><code>$ git branch -d feature1  \nDeleted branch feature1 (was 14096d0).  \n</code></pre><p>用<code>git log --graph</code>命令可以看到分支合并图。  </p>\n<p><code>git merge --abort</code> 语句可以从冲突解决状态中退出, 并将文件回退到合并前的状态. 但开始合并后不能有未提交的改动.</p>\n","heading":[],"tags":["git"],"date":"2024-01-11","series":"其他","title":"Git冲突合并","slug":"git-merge","keywords":"git冲突合并","description":"git用法，git merge","lastmod":"","share":"true"}