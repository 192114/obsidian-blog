{"html":"<hr>\n<ul>\n<li>查看分支：<code>git branch</code>  </li>\n<li>创建分支：<code>git branch &lt;name&gt;</code>  </li>\n<li>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code>  </li>\n<li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code>  </li>\n<li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code>  </li>\n<li>删除分支：<code>git branch -d &lt;name&gt;</code></li>\n</ul>\n<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                  HEAD  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n<span class=\"hljs-code\">                 master  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n</code></pre><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。  </p>\n<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                 master  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n<span class=\"hljs-code\">                    ▲  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                   dev  </span>\n<span class=\"hljs-code\">                    ▲  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                  HEAD  </span>\n</code></pre><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！  </p>\n<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                 master  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n<span class=\"hljs-code\">                             ▲  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                            dev  </span>\n<span class=\"hljs-code\">                             ▲  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                           HEAD  </span>\n</code></pre><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                           HEAD  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n<span class=\"hljs-code\">                          master  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n<span class=\"hljs-code\">                             ▲  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                            dev  </span>\n</code></pre><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！  </p>\n<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                           HEAD  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n<span class=\"hljs-code\">                          master  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n</code></pre><p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？  </p>\n<p>下面开始实战。  </p>\n<p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：  </p>\n<pre><code class=\"hljs language-Bash\">git checkout -b dev  \nSwitched to a new branch <span class=\"hljs-string\">'dev'</span>  \n</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：  </p>\n<pre><code class=\"hljs language-Bash\">git branch dev  \ngit checkout dev  \nSwitched to branch <span class=\"hljs-string\">'dev'</span>  \n</code></pre><p>然后，用<code>git branch</code>命令查看当前分支：  </p>\n<pre><code class=\"hljs language-Bash\">git branch  \n* dev  \n  master  \n</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。  </p>\n<p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：  </p>\n<pre><code class=\"hljs language-Bash\">Creating a new branch is quick.  \n</code></pre><p>然后提交：  </p>\n<pre><code class=\"hljs language-Bash\">git add readme.txt   \ngit commit -m <span class=\"hljs-string\">\"branch test\"</span>  \n[dev b17d20e] branch <span class=\"hljs-built_in\">test</span>  \n 1 file changed, 1 insertion(+)  \n</code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：  </p>\n<pre><code class=\"hljs language-Bash\">git checkout master  \nSwitched to branch <span class=\"hljs-string\">'master'</span>  \n</code></pre><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：  </p>\n<p><img alt=\"git-branch.png\" src=\"../../static/images/git-branch.png\">  </p>\n<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：  </p>\n<pre><code class=\"hljs language-Bash\">git merge dev  \nUpdating d46f35e..b17d20e  \nFast-forward  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  \n</code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。  </p>\n<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。  </p>\n<p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。  </p>\n<p>合并完成后，就可以放心地删除<code>dev</code>分支了：  </p>\n<pre><code class=\"hljs language-Bash\">git branch -d dev  \nDeleted branch dev (was b17d20e).  \n</code></pre><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：  </p>\n<pre><code class=\"hljs language-Bash\">git branch  \n* master  \n</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。  </p>\n<h3 id=\"anchor-switch\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-switch\"><span class=\"octicon octicon-link\"></span></a>\n        switch\n        </h3>\n<p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。  </p>\n<p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：  </p>\n<p>创建并切换到新的<code>dev</code>分支，可以使用：  </p>\n<pre><code class=\"hljs language-Bash\">git switch -c dev  \n</code></pre><p>直接切换到已有的<code>master</code>分支，可以使用：  </p>\n<pre><code class=\"hljs language-Bash\">git switch master  \n</code></pre><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p>\n","heading":[{"text":"switch","level":3,"id":"anchor-switch"}],"tokens":[{"type":"hr","raw":"---  \n"},{"type":"space","raw":"  \n"},{"type":"list","raw":"- 查看分支：`git branch`  \n- 创建分支：`git branch <name>`  \n- 切换分支：`git checkout <name>`或者`git switch <name>`  \n- 创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  \n- 合并某分支到当前分支：`git merge <name>`  \n- 删除分支：`git branch -d <name>`","ordered":false,"start":"","loose":false,"items":[{"type":"list_item","raw":"- 查看分支：`git branch`  \n","task":false,"loose":false,"text":"查看分支：`git branch`  ","tokens":[{"type":"text","raw":"查看分支：`git branch`  ","text":"查看分支：`git branch`  ","tokens":[{"type":"text","raw":"查看分支：","text":"查看分支："},{"type":"codespan","raw":"`git branch`","text":"git branch"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 创建分支：`git branch <name>`  \n","task":false,"loose":false,"text":"创建分支：`git branch <name>`  ","tokens":[{"type":"text","raw":"创建分支：`git branch <name>`  ","text":"创建分支：`git branch <name>`  ","tokens":[{"type":"text","raw":"创建分支：","text":"创建分支："},{"type":"codespan","raw":"`git branch <name>`","text":"git branch &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 切换分支：`git checkout <name>`或者`git switch <name>`  \n","task":false,"loose":false,"text":"切换分支：`git checkout <name>`或者`git switch <name>`  ","tokens":[{"type":"text","raw":"切换分支：`git checkout <name>`或者`git switch <name>`  ","text":"切换分支：`git checkout <name>`或者`git switch <name>`  ","tokens":[{"type":"text","raw":"切换分支：","text":"切换分支："},{"type":"codespan","raw":"`git checkout <name>`","text":"git checkout &lt;name&gt;"},{"type":"text","raw":"或者","text":"或者"},{"type":"codespan","raw":"`git switch <name>`","text":"git switch &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  \n","task":false,"loose":false,"text":"创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  ","tokens":[{"type":"text","raw":"创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  ","text":"创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`  ","tokens":[{"type":"text","raw":"创建+切换分支：","text":"创建+切换分支："},{"type":"codespan","raw":"`git checkout -b <name>`","text":"git checkout -b &lt;name&gt;"},{"type":"text","raw":"或者","text":"或者"},{"type":"codespan","raw":"`git switch -c <name>`","text":"git switch -c &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 合并某分支到当前分支：`git merge <name>`  \n","task":false,"loose":false,"text":"合并某分支到当前分支：`git merge <name>`  ","tokens":[{"type":"text","raw":"合并某分支到当前分支：`git merge <name>`  ","text":"合并某分支到当前分支：`git merge <name>`  ","tokens":[{"type":"text","raw":"合并某分支到当前分支：","text":"合并某分支到当前分支："},{"type":"codespan","raw":"`git merge <name>`","text":"git merge &lt;name&gt;"},{"type":"text","raw":"  ","text":"  "}]}]},{"type":"list_item","raw":"- 删除分支：`git branch -d <name>`","task":false,"loose":false,"text":"删除分支：`git branch -d <name>`","tokens":[{"type":"text","raw":"删除分支：`git branch -d <name>`","text":"删除分支：`git branch -d <name>`","tokens":[{"type":"text","raw":"删除分支：","text":"删除分支："},{"type":"codespan","raw":"`git branch -d <name>`","text":"git branch -d &lt;name&gt;"}]}]}]},{"type":"space","raw":"  \n  \n"},{"type":"paragraph","raw":"一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用`HEAD`指向`master`，就能确定当前分支，以及当前分支的提交点：  ","text":"一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用`HEAD`指向`master`，就能确定当前分支，以及当前分支的提交点：  ","tokens":[{"type":"text","raw":"一开始的时候，","text":"一开始的时候，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支是一条线，Git用","text":"分支是一条线，Git用"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指向最新的提交，再用","text":"指向最新的提交，再用"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"，就能确定当前分支，以及当前分支的提交点：  ","text":"，就能确定当前分支，以及当前分支的提交点：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                  HEAD  \n                    │  \n                    │  \n                    ▼  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n```  ","lang":"asciidoc","text":"                  HEAD  \n                    │  \n                    │  \n                    ▼  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"每次提交，`master`分支都会向前移动一步，这样，随着你不断提交，`master`分支的线也越来越长。  ","text":"每次提交，`master`分支都会向前移动一步，这样，随着你不断提交，`master`分支的线也越来越长。  ","tokens":[{"type":"text","raw":"每次提交，","text":"每次提交，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支都会向前移动一步，这样，随着你不断提交，","text":"分支都会向前移动一步，这样，随着你不断提交，"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支的线也越来越长。  ","text":"分支的线也越来越长。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"当我们创建新的分支，例如`dev`时，Git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示当前分支在`dev`上：  ","text":"当我们创建新的分支，例如`dev`时，Git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示当前分支在`dev`上：  ","tokens":[{"type":"text","raw":"当我们创建新的分支，例如","text":"当我们创建新的分支，例如"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"时，Git新建了一个指针叫","text":"时，Git新建了一个指针叫"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"，指向","text":"，指向"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"相同的提交，再把","text":"相同的提交，再把"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"，就表示当前分支在","text":"，就表示当前分支在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"上：  ","text":"上：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n                    ▲  \n                    │  \n                    │  \n                   dev  \n                    ▲  \n                    │  \n                    │  \n                  HEAD  \n```  ","lang":"asciidoc","text":"                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n                    ▲  \n                    │  \n                    │  \n                   dev  \n                    ▲  \n                    │  \n                    │  \n                  HEAD  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"你看，Git创建一个分支很快，因为除了增加一个`dev`指针，改改`HEAD`的指向，工作区的文件都没有任何变化！  ","text":"你看，Git创建一个分支很快，因为除了增加一个`dev`指针，改改`HEAD`的指向，工作区的文件都没有任何变化！  ","tokens":[{"type":"text","raw":"你看，Git创建一个分支很快，因为除了增加一个","text":"你看，Git创建一个分支很快，因为除了增加一个"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"指针，改改","text":"指针，改改"},{"type":"codespan","raw":"`HEAD`","text":"HEAD"},{"type":"text","raw":"的指向，工作区的文件都没有任何变化！  ","text":"的指向，工作区的文件都没有任何变化！  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"不过，从现在开始，对工作区的修改和提交就是针对`dev`分支了，比如新提交一次后，`dev`指针往前移动一步，而`master`指针不变：  ","text":"不过，从现在开始，对工作区的修改和提交就是针对`dev`分支了，比如新提交一次后，`dev`指针往前移动一步，而`master`指针不变：  ","tokens":[{"type":"text","raw":"不过，从现在开始，对工作区的修改和提交就是针对","text":"不过，从现在开始，对工作区的修改和提交就是针对"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支了，比如新提交一次后，","text":"分支了，比如新提交一次后，"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"指针往前移动一步，而","text":"指针往前移动一步，而"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指针不变：  ","text":"指针不变：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  \n                             ▲  \n                             │  \n                             │  \n                           HEAD  \n```  ","lang":"asciidoc","text":"                 master  \n                    │  \n                    │  \n                    ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  \n                             ▲  \n                             │  \n                             │  \n                           HEAD  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上。Git怎么合并呢？最简单的方法，就是直接把`master`指向`dev`的当前提交，就完成了合并：  ","text":"假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上。Git怎么合并呢？最简单的方法，就是直接把`master`指向`dev`的当前提交，就完成了合并：  ","tokens":[{"type":"text","raw":"假如我们在","text":"假如我们在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"上的工作完成了，就可以把","text":"上的工作完成了，就可以把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"合并到","text":"合并到"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"上。Git怎么合并呢？最简单的方法，就是直接把","text":"上。Git怎么合并呢？最简单的方法，就是直接把"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"的当前提交，就完成了合并：  ","text":"的当前提交，就完成了合并：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  \n```  ","lang":"asciidoc","text":"                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n                             ▲  \n                             │  \n                             │  \n                            dev  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  ","text":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  ","tokens":[{"type":"text","raw":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  ","text":"所以Git合并分支也很快！就改改指针，工作区内容也不变！  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"合并完分支后，甚至可以删除`dev`分支。删除`dev`分支就是把`dev`指针给删掉，删掉后，我们就剩下了一条`master`分支：  ","text":"合并完分支后，甚至可以删除`dev`分支。删除`dev`分支就是把`dev`指针给删掉，删掉后，我们就剩下了一条`master`分支：  ","tokens":[{"type":"text","raw":"合并完分支后，甚至可以删除","text":"合并完分支后，甚至可以删除"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支。删除","text":"分支。删除"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支就是把","text":"分支就是把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"指针给删掉，删掉后，我们就剩下了一条","text":"指针给删掉，删掉后，我们就剩下了一条"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` asciidoc  \n                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n```  ","lang":"asciidoc","text":"                           HEAD  \n                             │  \n                             │  \n                             ▼  \n                          master  \n                             │  \n                             │  \n                             ▼  \n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  ","text":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  ","tokens":[{"type":"text","raw":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  ","text":"真是太神奇了，你看得出来有些提交是通过分支完成的吗？  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"下面开始实战。  ","text":"下面开始实战。  ","tokens":[{"type":"text","raw":"下面开始实战。  ","text":"下面开始实战。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"首先，我们创建`dev`分支，然后切换到`dev`分支：  ","text":"首先，我们创建`dev`分支，然后切换到`dev`分支：  ","tokens":[{"type":"text","raw":"首先，我们创建","text":"首先，我们创建"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支，然后切换到","text":"分支，然后切换到"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit checkout -b dev  \nSwitched to a new branch 'dev'  \n```  ","lang":"Bash","text":"git checkout -b dev  \nSwitched to a new branch 'dev'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：  ","text":"`git checkout`命令加上`-b`参数表示创建并切换，相当于以下两条命令：  ","tokens":[{"type":"codespan","raw":"`git checkout`","text":"git checkout"},{"type":"text","raw":"命令加上","text":"命令加上"},{"type":"codespan","raw":"`-b`","text":"-b"},{"type":"text","raw":"参数表示创建并切换，相当于以下两条命令：  ","text":"参数表示创建并切换，相当于以下两条命令：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch dev  \ngit checkout dev  \nSwitched to branch 'dev'  \n```  ","lang":"Bash","text":"git branch dev  \ngit checkout dev  \nSwitched to branch 'dev'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"然后，用`git branch`命令查看当前分支：  ","text":"然后，用`git branch`命令查看当前分支：  ","tokens":[{"type":"text","raw":"然后，用","text":"然后，用"},{"type":"codespan","raw":"`git branch`","text":"git branch"},{"type":"text","raw":"命令查看当前分支：  ","text":"命令查看当前分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch  \n* dev  \n  master  \n```  ","lang":"Bash","text":"git branch  \n* dev  \n  master  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git branch`命令会列出所有分支，当前分支前面会标一个`*`号。  ","text":"`git branch`命令会列出所有分支，当前分支前面会标一个`*`号。  ","tokens":[{"type":"codespan","raw":"`git branch`","text":"git branch"},{"type":"text","raw":"命令会列出所有分支，当前分支前面会标一个","text":"命令会列出所有分支，当前分支前面会标一个"},{"type":"codespan","raw":"`*`","text":"*"},{"type":"text","raw":"号。  ","text":"号。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"然后，我们就可以在`dev`分支上正常提交，比如对`readme.txt`做个修改，加上一行：  ","text":"然后，我们就可以在`dev`分支上正常提交，比如对`readme.txt`做个修改，加上一行：  ","tokens":[{"type":"text","raw":"然后，我们就可以在","text":"然后，我们就可以在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上正常提交，比如对","text":"分支上正常提交，比如对"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"做个修改，加上一行：  ","text":"做个修改，加上一行：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \nCreating a new branch is quick.  \n```  ","lang":"Bash","text":"Creating a new branch is quick.  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"然后提交：  ","text":"然后提交：  ","tokens":[{"type":"text","raw":"然后提交：  ","text":"然后提交：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit add readme.txt   \ngit commit -m \"branch test\"  \n[dev b17d20e] branch test  \n 1 file changed, 1 insertion(+)  \n```  ","lang":"Bash","text":"git add readme.txt   \ngit commit -m \"branch test\"  \n[dev b17d20e] branch test  \n 1 file changed, 1 insertion(+)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，`dev`分支的工作完成，我们就可以切换回`master`分支：  ","text":"现在，`dev`分支的工作完成，我们就可以切换回`master`分支：  ","tokens":[{"type":"text","raw":"现在，","text":"现在，"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支的工作完成，我们就可以切换回","text":"分支的工作完成，我们就可以切换回"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支：  ","text":"分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit checkout master  \nSwitched to branch 'master'  \n```  ","lang":"Bash","text":"git checkout master  \nSwitched to branch 'master'  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"切换回`master`分支后，再查看一个`readme.txt`文件，刚才添加的内容不见了！因为那个提交是在`dev`分支上，而`master`分支此刻的提交点并没有变：  ","text":"切换回`master`分支后，再查看一个`readme.txt`文件，刚才添加的内容不见了！因为那个提交是在`dev`分支上，而`master`分支此刻的提交点并没有变：  ","tokens":[{"type":"text","raw":"切换回","text":"切换回"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支后，再查看一个","text":"分支后，再查看一个"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"文件，刚才添加的内容不见了！因为那个提交是在","text":"文件，刚才添加的内容不见了！因为那个提交是在"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支上，而","text":"分支上，而"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支此刻的提交点并没有变：  ","text":"分支此刻的提交点并没有变：  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"![git-branch.png](../../static/images/git-branch.png)  ","text":"![git-branch.png](../../static/images/git-branch.png)  ","tokens":[{"type":"image","raw":"![git-branch.png](../../static/images/git-branch.png)","href":"../../static/images/git-branch.png","title":null,"text":"git-branch.png"},{"type":"text","raw":"  ","text":"  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"现在，我们把`dev`分支的工作成果合并到`master`分支上：  ","text":"现在，我们把`dev`分支的工作成果合并到`master`分支上：  ","tokens":[{"type":"text","raw":"现在，我们把","text":"现在，我们把"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支的工作成果合并到","text":"分支的工作成果合并到"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支上：  ","text":"分支上：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit merge dev  \nUpdating d46f35e..b17d20e  \nFast-forward  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  \n```  ","lang":"Bash","text":"git merge dev  \nUpdating d46f35e..b17d20e  \nFast-forward  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"`git merge`命令用于合并指定分支到当前分支。合并后，再查看`readme.txt`的内容，就可以看到，和`dev`分支的最新提交是完全一样的。  ","text":"`git merge`命令用于合并指定分支到当前分支。合并后，再查看`readme.txt`的内容，就可以看到，和`dev`分支的最新提交是完全一样的。  ","tokens":[{"type":"codespan","raw":"`git merge`","text":"git merge"},{"type":"text","raw":"命令用于合并指定分支到当前分支。合并后，再查看","text":"命令用于合并指定分支到当前分支。合并后，再查看"},{"type":"codespan","raw":"`readme.txt`","text":"readme.txt"},{"type":"text","raw":"的内容，就可以看到，和","text":"的内容，就可以看到，和"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支的最新提交是完全一样的。  ","text":"分支的最新提交是完全一样的。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"注意到上面的`Fast-forward`信息，Git告诉我们，这次合并是“快进模式”，也就是直接把`master`指向`dev`的当前提交，所以合并速度非常快。  ","text":"注意到上面的`Fast-forward`信息，Git告诉我们，这次合并是“快进模式”，也就是直接把`master`指向`dev`的当前提交，所以合并速度非常快。  ","tokens":[{"type":"text","raw":"注意到上面的","text":"注意到上面的"},{"type":"codespan","raw":"`Fast-forward`","text":"Fast-forward"},{"type":"text","raw":"信息，Git告诉我们，这次合并是“快进模式”，也就是直接把","text":"信息，Git告诉我们，这次合并是“快进模式”，也就是直接把"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"指向","text":"指向"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"的当前提交，所以合并速度非常快。  ","text":"的当前提交，所以合并速度非常快。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"当然，也不是每次合并都能`Fast-forward`，我们后面会讲其他方式的合并。  ","text":"当然，也不是每次合并都能`Fast-forward`，我们后面会讲其他方式的合并。  ","tokens":[{"type":"text","raw":"当然，也不是每次合并都能","text":"当然，也不是每次合并都能"},{"type":"codespan","raw":"`Fast-forward`","text":"Fast-forward"},{"type":"text","raw":"，我们后面会讲其他方式的合并。  ","text":"，我们后面会讲其他方式的合并。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"合并完成后，就可以放心地删除`dev`分支了：  ","text":"合并完成后，就可以放心地删除`dev`分支了：  ","tokens":[{"type":"text","raw":"合并完成后，就可以放心地删除","text":"合并完成后，就可以放心地删除"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支了：  ","text":"分支了：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch -d dev  \nDeleted branch dev (was b17d20e).  \n```  ","lang":"Bash","text":"git branch -d dev  \nDeleted branch dev (was b17d20e).  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"删除后，查看`branch`，就只剩下`master`分支了：  ","text":"删除后，查看`branch`，就只剩下`master`分支了：  ","tokens":[{"type":"text","raw":"删除后，查看","text":"删除后，查看"},{"type":"codespan","raw":"`branch`","text":"branch"},{"type":"text","raw":"，就只剩下","text":"，就只剩下"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支了：  ","text":"分支了：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit branch  \n* master  \n```  ","lang":"Bash","text":"git branch  \n* master  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在`master`分支上工作效果是一样的，但过程更安全。  ","text":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在`master`分支上工作效果是一样的，但过程更安全。  ","tokens":[{"type":"text","raw":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在","text":"因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支上工作效果是一样的，但过程更安全。  ","text":"分支上工作效果是一样的，但过程更安全。  "}]},{"type":"space","raw":"\n  \n"},{"type":"heading","raw":"### switch  \n","depth":3,"text":"switch","tokens":[{"type":"text","raw":"switch","text":"switch"}]},{"type":"space","raw":"  \n"},{"type":"paragraph","raw":"我们注意到切换分支使用`git checkout <branch>`，而前面讲过的撤销修改则是`git checkout -- <file>`，同一个命令，有两种作用，确实有点令人迷惑。  ","text":"我们注意到切换分支使用`git checkout <branch>`，而前面讲过的撤销修改则是`git checkout -- <file>`，同一个命令，有两种作用，确实有点令人迷惑。  ","tokens":[{"type":"text","raw":"我们注意到切换分支使用","text":"我们注意到切换分支使用"},{"type":"codespan","raw":"`git checkout <branch>`","text":"git checkout &lt;branch&gt;"},{"type":"text","raw":"，而前面讲过的撤销修改则是","text":"，而前面讲过的撤销修改则是"},{"type":"codespan","raw":"`git checkout -- <file>`","text":"git checkout -- &lt;file&gt;"},{"type":"text","raw":"，同一个命令，有两种作用，确实有点令人迷惑。  ","text":"，同一个命令，有两种作用，确实有点令人迷惑。  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"实际上，切换分支这个动作，用`switch`更科学。因此，最新版本的Git提供了新的`git switch`命令来切换分支：  ","text":"实际上，切换分支这个动作，用`switch`更科学。因此，最新版本的Git提供了新的`git switch`命令来切换分支：  ","tokens":[{"type":"text","raw":"实际上，切换分支这个动作，用","text":"实际上，切换分支这个动作，用"},{"type":"codespan","raw":"`switch`","text":"switch"},{"type":"text","raw":"更科学。因此，最新版本的Git提供了新的","text":"更科学。因此，最新版本的Git提供了新的"},{"type":"codespan","raw":"`git switch`","text":"git switch"},{"type":"text","raw":"命令来切换分支：  ","text":"命令来切换分支：  "}]},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"创建并切换到新的`dev`分支，可以使用：  ","text":"创建并切换到新的`dev`分支，可以使用：  ","tokens":[{"type":"text","raw":"创建并切换到新的","text":"创建并切换到新的"},{"type":"codespan","raw":"`dev`","text":"dev"},{"type":"text","raw":"分支，可以使用：  ","text":"分支，可以使用：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch -c dev  \n```  ","lang":"Bash","text":"git switch -c dev  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"直接切换到已有的`master`分支，可以使用：  ","text":"直接切换到已有的`master`分支，可以使用：  ","tokens":[{"type":"text","raw":"直接切换到已有的","text":"直接切换到已有的"},{"type":"codespan","raw":"`master`","text":"master"},{"type":"text","raw":"分支，可以使用：  ","text":"分支，可以使用：  "}]},{"type":"space","raw":"\n  \n"},{"type":"code","raw":"``` Bash  \ngit switch master  \n```  ","lang":"Bash","text":"git switch master  "},{"type":"space","raw":"\n  \n"},{"type":"paragraph","raw":"使用新的`git switch`命令，比`git checkout`要更容易理解。","text":"使用新的`git switch`命令，比`git checkout`要更容易理解。","tokens":[{"type":"text","raw":"使用新的","text":"使用新的"},{"type":"codespan","raw":"`git switch`","text":"git switch"},{"type":"text","raw":"命令，比","text":"命令，比"},{"type":"codespan","raw":"`git checkout`","text":"git checkout"},{"type":"text","raw":"要更容易理解。","text":"要更容易理解。"}]}],"tags":["git"],"date":"2024-01-08","series":"其他","title":"Git的分支管理","slug":"git-branch","keywords":"git branch","description":"git用法，git branch","lastmod":"","share":"true"}