{"html":"<hr>\n<ul>\n<li>查看分支：<code>git branch</code>  </li>\n<li>创建分支：<code>git branch &lt;name&gt;</code>  </li>\n<li>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code>  </li>\n<li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code>  </li>\n<li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code>  </li>\n<li>删除分支：<code>git branch -d &lt;name&gt;</code></li>\n</ul>\n<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                  HEAD  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n<span class=\"hljs-code\">                 master  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n</code></pre><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。  </p>\n<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                 master  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘  \n<span class=\"hljs-code\">                    ▲  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                   dev  </span>\n<span class=\"hljs-code\">                    ▲  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                  HEAD  </span>\n</code></pre><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！  </p>\n<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                 master  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    │  </span>\n<span class=\"hljs-code\">                    ▼  </span>\n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n<span class=\"hljs-code\">                             ▲  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                            dev  </span>\n<span class=\"hljs-code\">                             ▲  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                           HEAD  </span>\n</code></pre><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                           HEAD  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n<span class=\"hljs-code\">                          master  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n<span class=\"hljs-code\">                             ▲  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                            dev  </span>\n</code></pre><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！  </p>\n<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：  </p>\n<pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">                           HEAD  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n<span class=\"hljs-code\">                          master  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             │  </span>\n<span class=\"hljs-code\">                             ▼  </span>\n┌───┐    ┌───┐    ┌───┐    ┌───┐  \n│   │───▶│   │───▶│   │───▶│   │  \n└───┘    └───┘    └───┘    └───┘  \n</code></pre><p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？  </p>\n<p>下面开始实战。  </p>\n<p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：  </p>\n<pre><code class=\"hljs language-Bash\">git checkout -b dev  \nSwitched to a new branch <span class=\"hljs-string\">'dev'</span>  \n</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：  </p>\n<pre><code class=\"hljs language-Bash\">git branch dev  \ngit checkout dev  \nSwitched to branch <span class=\"hljs-string\">'dev'</span>  \n</code></pre><p>然后，用<code>git branch</code>命令查看当前分支：  </p>\n<pre><code class=\"hljs language-Bash\">git branch  \n* dev  \n  master  \n</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。  </p>\n<p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：  </p>\n<pre><code class=\"hljs language-Bash\">Creating a new branch is quick.  \n</code></pre><p>然后提交：  </p>\n<pre><code class=\"hljs language-Bash\">git add readme.txt   \ngit commit -m <span class=\"hljs-string\">\"branch test\"</span>  \n[dev b17d20e] branch <span class=\"hljs-built_in\">test</span>  \n 1 file changed, 1 insertion(+)  \n</code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：  </p>\n<pre><code class=\"hljs language-Bash\">git checkout master  \nSwitched to branch <span class=\"hljs-string\">'master'</span>  \n</code></pre><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：  </p>\n<p><img alt=\"git-branch.png\" src=\"../../static/images/git-branch.png\">  </p>\n<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：  </p>\n<pre><code class=\"hljs language-Bash\">git merge dev  \nUpdating d46f35e..b17d20e  \nFast-forward  \n readme.txt | 1 +  \n 1 file changed, 1 insertion(+)  \n</code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。  </p>\n<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。  </p>\n<p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。  </p>\n<p>合并完成后，就可以放心地删除<code>dev</code>分支了：  </p>\n<pre><code class=\"hljs language-Bash\">git branch -d dev  \nDeleted branch dev (was b17d20e).  \n</code></pre><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：  </p>\n<pre><code class=\"hljs language-Bash\">git branch  \n* master  \n</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。  </p>\n<h3 id=\"anchor-switch\">\n        <a aria-hidden=\"true\" class=\"anchor\" href=\"#anchor-switch\"><span class=\"octicon octicon-link\"></span></a>\n        switch\n        </h3>\n<p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。  </p>\n<p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：  </p>\n<p>创建并切换到新的<code>dev</code>分支，可以使用：  </p>\n<pre><code class=\"hljs language-Bash\">git switch -c dev  \n</code></pre><p>直接切换到已有的<code>master</code>分支，可以使用：  </p>\n<pre><code class=\"hljs language-Bash\">git switch master  \n</code></pre><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p>\n","heading":[{"text":"switch","level":3,"id":"anchor-switch"}],"tags":["git"],"date":"2024-01-08","series":"其他","title":"Git的分支管理","slug":"git-branch","keywords":"git branch","description":"git用法，git branch","lastmod":"","share":"true"}